// -------------------------------------------------------------
// 
// File Name: hdlsrc\HDLDroneModel3\HDLDroneModel3.v
// Created: 2024-04-07 10:02:42
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-08
// Target subsystem base rate: 1e-08
// Explicit user oversample request: 20000000x
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        1e-08
// Out2                          ce_out        1e-08
// Out3                          ce_out        1e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDLDroneModel3
// Source Path: HDLDroneModel3
// Hierarchy Level: 0
// Model version: 1.6
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDLDroneModel3
          (clk,
           reset,
           clk_enable,
           Alpha,
           Beta,
           Phi,
           AoA,
           Aos,
           Demands_0,
           Demands_1,
           Demands_2,
           Rates_0,
           Rates_1,
           Rates_2,
           ce_out,
           Out1,
           Out2,
           Out3);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [31:0] Alpha;  // single
  input   [31:0] Beta;  // single
  input   [31:0] Phi;  // single
  input   [31:0] AoA;  // single
  input   [31:0] Aos;  // single
  input   [31:0] Demands_0;  // single
  input   [31:0] Demands_1;  // single
  input   [31:0] Demands_2;  // single
  input   [31:0] Rates_0;  // single
  input   [31:0] Rates_1;  // single
  input   [31:0] Rates_2;  // single
  output  ce_out;
  output  [31:0] Out1;  // single
  output  [31:0] Out2;  // single
  output  [31:0] Out3;  // single


  wire enb_1_20000000_1;
  wire enb;
  wire enb_1_1_1;
  wire [31:0] Alpha_1;  // ufix32
  wire [31:0] ufixout;  // uint32
  wire signed [31:0] fixout;  // int32
  wire switch_compare_1;
  wire [30:0] bitsliceout;  // ufix31
  wire signed [31:0] masksignbitout;  // int32
  wire isNaN;
  wire signed [32:0] uminus_in0;  // sfix33
  wire signed [32:0] uminus_1;  // sfix33
  wire signed [31:0] uminusout;  // int32
  wire signed [31:0] nanSwitch;  // int32
  wire signed [31:0] convout;  // int32
  wire relopout_1_1;
  wire relopout_3_1;
  wire relopout_5_1;
  wire [31:0] Beta_1;  // ufix32
  wire [31:0] ufixout_1;  // uint32
  wire signed [31:0] fixout_1;  // int32
  wire switch_compare_1_1;
  wire [30:0] bitsliceout_1;  // ufix31
  wire signed [31:0] masksignbitout_1;  // int32
  wire isNaN_1;
  wire signed [32:0] uminus_in0_1;  // sfix33
  wire signed [32:0] uminus_3;  // sfix33
  wire signed [31:0] uminusout_1;  // int32
  wire signed [31:0] nanSwitch_1;  // int32
  wire signed [31:0] convout_1;  // int32
  wire relopout_1_3;
  wire relopout_3_3;
  wire relopout_2_1;
  wire [1:0] Kp_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] Kp_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] Kp_treesum_stage1_1;  // ufix2
  wire relopout_4_1;
  wire [1:0] Kp_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] Kp_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] Kp_treesum_stage1_2;  // ufix2
  wire [2:0] Kp_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] Kp_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] Kp_treesum_stage2_1;  // ufix3
  wire relopout_6_1;
  wire [1:0] Kp_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] Kp_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] Kp_treesum_stage1_3;  // ufix2
  wire relopout_7_1;
  wire [1:0] Kp_treesum_stage1_4;  // ufix2
  wire [2:0] Kp_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] Kp_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] Kp_treesum_stage2_2;  // ufix3
  wire [3:0] Kp_treesum_stage3_1;  // ufix4
  wire [3:0] Kp_treesum_stage3_2;  // ufix4
  wire [3:0] Kp_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout;  // ufix3
  wire relopout_2_3;
  wire [1:0] Kp_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] Kp_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] Kp_treesum_stage1_1_1;  // ufix2
  wire relopout_4_3;
  wire [1:0] Kp_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] Kp_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] Kp_treesum_stage1_2_1;  // ufix2
  wire [2:0] Kp_treesum_stage2_3;  // ufix3
  wire [2:0] Kp_treesum_stage2_4;  // ufix3
  wire [2:0] Kp_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_1;  // ufix3
  wire [31:0] Kp_1 [0:39];  // ufix32 [40]
  wire signed [3:0] Kp_add_cast;  // sfix4_E3
  wire signed [35:0] Kp_add_cast_1;  // sfix36
  wire [31:0] Kp_out1;  // ufix32
  reg [31:0] rd_6_reg [0:13];  // ufix32 [14]
  reg [31:0] rd_6_reg_next [0:13];  // ufix32 [14]
  reg [31:0] Kp_out1_1;  // ufix32
  wire [31:0] Rates [0:2];  // ufix32 [3]
  reg [31:0] Rates_3 [0:2];  // ufix32 [3]
  wire [31:0] Alpha_2;  // ufix32
  wire [31:0] ufixout_2;  // uint32
  wire signed [31:0] fixout_2;  // int32
  wire switch_compare_1_2;
  wire [30:0] bitsliceout_2;  // ufix31
  wire signed [31:0] masksignbitout_2;  // int32
  wire isNaN_2;
  wire signed [32:0] uminus_in0_2;  // sfix33
  wire signed [32:0] uminus_5;  // sfix33
  wire signed [31:0] uminusout_2;  // int32
  wire signed [31:0] nanSwitch_2;  // int32
  wire signed [31:0] convout_2;  // int32
  wire relopout_1_5;
  wire relopout_3_5;
  wire relopout_5_3;
  wire [31:0] Beta_2;  // ufix32
  wire [31:0] ufixout_3;  // uint32
  wire signed [31:0] fixout_3;  // int32
  wire switch_compare_1_3;
  wire [30:0] bitsliceout_3;  // ufix31
  wire signed [31:0] masksignbitout_3;  // int32
  wire isNaN_3;
  wire signed [32:0] uminus_in0_3;  // sfix33
  wire signed [32:0] uminus_7;  // sfix33
  wire signed [31:0] uminusout_3;  // int32
  wire signed [31:0] nanSwitch_3;  // int32
  wire signed [31:0] convout_3;  // int32
  wire relopout_1_7;
  wire relopout_3_7;
  wire [31:0] ufixout_4;  // uint32
  wire signed [31:0] fixout_4;  // int32
  wire switch_compare_1_4;
  wire [30:0] bitsliceout_4;  // ufix31
  wire signed [31:0] masksignbitout_4;  // int32
  wire isNaN_4;
  wire signed [32:0] uminus_in0_4;  // sfix33
  wire signed [32:0] uminus_9;  // sfix33
  wire signed [31:0] uminusout_4;  // int32
  wire signed [31:0] nanSwitch_4;  // int32
  wire signed [31:0] convout_4;  // int32
  wire relopout_1_9;
  wire relopout_3_9;
  wire relopout_5_5;
  wire [31:0] ufixout_5;  // uint32
  wire signed [31:0] fixout_5;  // int32
  wire switch_compare_1_5;
  wire [30:0] bitsliceout_5;  // ufix31
  wire signed [31:0] masksignbitout_5;  // int32
  wire isNaN_5;
  wire signed [32:0] uminus_in0_5;  // sfix33
  wire signed [32:0] uminus_11;  // sfix33
  wire signed [31:0] uminusout_5;  // int32
  wire signed [31:0] nanSwitch_5;  // int32
  wire signed [31:0] convout_5;  // int32
  wire relopout_1_11;
  wire relopout_3_11;
  wire [31:0] Sum3_out1;  // ufix32
  wire relopout_2_5;
  wire [1:0] P_Phi_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_1;  // ufix2
  wire relopout_4_5;
  wire [1:0] P_Phi_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_2;  // ufix2
  wire [2:0] P_Phi_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] P_Phi_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] P_Phi_treesum_stage2_1;  // ufix3
  wire relopout_6_3;
  wire [1:0] P_Phi_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_3;  // ufix2
  wire relopout_7_3;
  wire [1:0] P_Phi_treesum_stage1_4;  // ufix2
  wire [2:0] P_Phi_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] P_Phi_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] P_Phi_treesum_stage2_2;  // ufix3
  wire [3:0] P_Phi_treesum_stage3_1;  // ufix4
  wire [3:0] P_Phi_treesum_stage3_2;  // ufix4
  wire [3:0] P_Phi_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_2;  // ufix3
  wire relopout_2_7;
  wire [1:0] P_Phi_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_1_1;  // ufix2
  wire relopout_4_7;
  wire [1:0] P_Phi_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] P_Phi_treesum_stage1_2_1;  // ufix2
  wire [2:0] P_Phi_treesum_stage2_3;  // ufix3
  wire [2:0] P_Phi_treesum_stage2_4;  // ufix3
  wire [2:0] P_Phi_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_3;  // ufix3
  wire [31:0] P_Phi_1 [0:39];  // ufix32 [40]
  wire signed [3:0] P_Phi_add_cast;  // sfix4_E3
  wire signed [35:0] P_Phi_add_cast_1;  // sfix36
  wire [31:0] P_Phi_out1;  // ufix32
  wire relopout_2_9;
  wire [1:0] K_Phi_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_1;  // ufix2
  wire relopout_4_9;
  wire [1:0] K_Phi_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_2;  // ufix2
  wire [2:0] K_Phi_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] K_Phi_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] K_Phi_treesum_stage2_1;  // ufix3
  wire relopout_6_5;
  wire [1:0] K_Phi_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_3;  // ufix2
  wire relopout_7_5;
  wire [1:0] K_Phi_treesum_stage1_4;  // ufix2
  wire [2:0] K_Phi_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] K_Phi_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] K_Phi_treesum_stage2_2;  // ufix3
  wire [3:0] K_Phi_treesum_stage3_1;  // ufix4
  wire [3:0] K_Phi_treesum_stage3_2;  // ufix4
  wire [3:0] K_Phi_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_4;  // ufix3
  wire relopout_2_11;
  wire [1:0] K_Phi_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_1_1;  // ufix2
  wire relopout_4_11;
  wire [1:0] K_Phi_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] K_Phi_treesum_stage1_2_1;  // ufix2
  wire [2:0] K_Phi_treesum_stage2_3;  // ufix3
  wire [2:0] K_Phi_treesum_stage2_4;  // ufix3
  wire [2:0] K_Phi_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_5;  // ufix3
  wire [31:0] K_Phi_1 [0:39];  // ufix32 [40]
  wire signed [3:0] K_Phi_add_cast;  // sfix4_E3
  wire signed [35:0] K_Phi_add_cast_1;  // sfix36
  wire [31:0] K_Phi_out1;  // ufix32
  wire [31:0] Discrete_PID_Controller_out1;  // ufix32
  reg [31:0] Discrete_PID_Controller_out1_1;  // ufix32
  wire [31:0] kconst;  // ufix32
  reg [31:0] kconst_1;  // ufix32
  wire [31:0] s_state_out1;  // ufix32
  wire [31:0] s_state_out1_1;  // ufix32
  reg [31:0] s_state_out1_2;  // ufix32
  wire [31:0] s_denom_gain1;  // ufix32
  reg [31:0] rd_4_reg [0:22];  // ufix32 [23]
  reg [31:0] rd_4_reg_next [0:22];  // ufix32 [23]
  reg [31:0] s_denom_gain1_1;  // ufix32
  wire [31:0] s_denom_acc_out1;  // ufix32
  reg [31:0] s_state_out11_bypass_reg;  // ufix32
  wire [31:0] s_state_out1_3;  // ufix32
  reg [31:0] s_state_out1_4;  // ufix32
  wire [31:0] Sum6_out1;  // ufix32
  reg [31:0] rd_7_reg [0:1];  // ufix32 [2]
  wire [31:0] rd_7_reg_next [0:1];  // ufix32 [2]
  wire [31:0] Sum6_out1_1;  // ufix32
  wire [31:0] Product_out1;  // ufix32
  reg [31:0] Product_out1_1;  // ufix32
  wire [31:0] ufixout_6;  // uint32
  wire signed [31:0] fixout_6;  // int32
  wire switch_compare_1_6;
  wire [30:0] bitsliceout_6;  // ufix31
  wire signed [31:0] masksignbitout_6;  // int32
  wire isNaN_6;
  wire signed [32:0] uminus_in0_6;  // sfix33
  wire signed [32:0] uminus_13;  // sfix33
  wire signed [31:0] uminusout_6;  // int32
  wire signed [31:0] nanSwitch_6;  // int32
  wire signed [31:0] convout_6;  // int32
  wire relopout_1_13;
  wire relopout_3_13;
  wire relopout_5_7;
  wire [31:0] ufixout_7;  // uint32
  wire signed [31:0] fixout_7;  // int32
  wire switch_compare_1_7;
  wire [30:0] bitsliceout_7;  // ufix31
  wire signed [31:0] masksignbitout_7;  // int32
  wire isNaN_7;
  wire signed [32:0] uminus_in0_7;  // sfix33
  wire signed [32:0] uminus_15;  // sfix33
  wire signed [31:0] uminusout_7;  // int32
  wire signed [31:0] nanSwitch_7;  // int32
  wire signed [31:0] convout_7;  // int32
  wire relopout_1_15;
  wire relopout_3_15;
  wire relopout_2_13;
  wire [1:0] Kq_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] Kq_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] Kq_treesum_stage1_1;  // ufix2
  wire relopout_4_13;
  wire [1:0] Kq_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] Kq_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] Kq_treesum_stage1_2;  // ufix2
  wire [2:0] Kq_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] Kq_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] Kq_treesum_stage2_1;  // ufix3
  wire relopout_6_7;
  wire [1:0] Kq_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] Kq_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] Kq_treesum_stage1_3;  // ufix2
  wire relopout_7_7;
  wire [1:0] Kq_treesum_stage1_4;  // ufix2
  wire [2:0] Kq_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] Kq_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] Kq_treesum_stage2_2;  // ufix3
  wire [3:0] Kq_treesum_stage3_1;  // ufix4
  wire [3:0] Kq_treesum_stage3_2;  // ufix4
  wire [3:0] Kq_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_6;  // ufix3
  wire relopout_2_15;
  wire [1:0] Kq_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] Kq_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] Kq_treesum_stage1_1_1;  // ufix2
  wire relopout_4_15;
  wire [1:0] Kq_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] Kq_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] Kq_treesum_stage1_2_1;  // ufix2
  wire [2:0] Kq_treesum_stage2_3;  // ufix3
  wire [2:0] Kq_treesum_stage2_4;  // ufix3
  wire [2:0] Kq_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_7;  // ufix3
  wire [31:0] Kq_1 [0:39];  // ufix32 [40]
  wire signed [3:0] Kq_add_cast;  // sfix4_E3
  wire signed [35:0] Kq_add_cast_1;  // sfix36
  wire [31:0] Kq_out1;  // ufix32
  reg [31:0] rd_13_reg [0:13];  // ufix32 [14]
  reg [31:0] rd_13_reg_next [0:13];  // ufix32 [14]
  reg [31:0] Kq_out1_1;  // ufix32
  wire [31:0] ufixout_8;  // uint32
  wire signed [31:0] fixout_8;  // int32
  wire switch_compare_1_8;
  wire [30:0] bitsliceout_8;  // ufix31
  wire signed [31:0] masksignbitout_8;  // int32
  wire isNaN_8;
  wire signed [32:0] uminus_in0_8;  // sfix33
  wire signed [32:0] uminus_17;  // sfix33
  wire signed [31:0] uminusout_8;  // int32
  wire signed [31:0] nanSwitch_8;  // int32
  wire signed [31:0] convout_8;  // int32
  wire relopout_1_17;
  wire relopout_3_17;
  wire relopout_5_9;
  wire [31:0] ufixout_9;  // uint32
  wire signed [31:0] fixout_9;  // int32
  wire switch_compare_1_9;
  wire [30:0] bitsliceout_9;  // ufix31
  wire signed [31:0] masksignbitout_9;  // int32
  wire isNaN_9;
  wire signed [32:0] uminus_in0_9;  // sfix33
  wire signed [32:0] uminus_19;  // sfix33
  wire signed [31:0] uminusout_9;  // int32
  wire signed [31:0] nanSwitch_9;  // int32
  wire signed [31:0] convout_9;  // int32
  wire relopout_1_19;
  wire relopout_3_19;
  wire [31:0] ufixout_10;  // uint32
  wire signed [31:0] fixout_10;  // int32
  wire switch_compare_1_10;
  wire [30:0] bitsliceout_10;  // ufix31
  wire signed [31:0] masksignbitout_10;  // int32
  wire isNaN_10;
  wire signed [32:0] uminus_in0_10;  // sfix33
  wire signed [32:0] uminus_21;  // sfix33
  wire signed [31:0] uminusout_10;  // int32
  wire signed [31:0] nanSwitch_10;  // int32
  wire signed [31:0] convout_10;  // int32
  wire relopout_1_21;
  wire relopout_3_21;
  wire relopout_5_11;
  wire [31:0] ufixout_11;  // uint32
  wire signed [31:0] fixout_11;  // int32
  wire switch_compare_1_11;
  wire [30:0] bitsliceout_11;  // ufix31
  wire signed [31:0] masksignbitout_11;  // int32
  wire isNaN_11;
  wire signed [32:0] uminus_in0_11;  // sfix33
  wire signed [32:0] uminus_23;  // sfix33
  wire signed [31:0] uminusout_11;  // int32
  wire signed [31:0] nanSwitch_11;  // int32
  wire signed [31:0] convout_11;  // int32
  wire relopout_1_23;
  wire relopout_3_23;
  wire [31:0] Sum2_out1;  // ufix32
  wire relopout_2_17;
  wire [1:0] P_Alpha_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_1;  // ufix2
  wire relopout_4_17;
  wire [1:0] P_Alpha_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_2;  // ufix2
  wire [2:0] P_Alpha_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] P_Alpha_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] P_Alpha_treesum_stage2_1;  // ufix3
  wire relopout_6_9;
  wire [1:0] P_Alpha_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_3;  // ufix2
  wire relopout_7_9;
  wire [1:0] P_Alpha_treesum_stage1_4;  // ufix2
  wire [2:0] P_Alpha_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] P_Alpha_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] P_Alpha_treesum_stage2_2;  // ufix3
  wire [3:0] P_Alpha_treesum_stage3_1;  // ufix4
  wire [3:0] P_Alpha_treesum_stage3_2;  // ufix4
  wire [3:0] P_Alpha_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_8;  // ufix3
  wire relopout_2_19;
  wire [1:0] P_Alpha_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_1_1;  // ufix2
  wire relopout_4_19;
  wire [1:0] P_Alpha_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] P_Alpha_treesum_stage1_2_1;  // ufix2
  wire [2:0] P_Alpha_treesum_stage2_3;  // ufix3
  wire [2:0] P_Alpha_treesum_stage2_4;  // ufix3
  wire [2:0] P_Alpha_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_9;  // ufix3
  wire [31:0] P_Alpha_1 [0:39];  // ufix32 [40]
  wire signed [3:0] P_Alpha_add_cast;  // sfix4_E3
  wire signed [35:0] P_Alpha_add_cast_1;  // sfix36
  wire [31:0] P_Alpha_out1;  // ufix32
  wire relopout_2_21;
  wire [1:0] K_Alpha_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_1;  // ufix2
  wire relopout_4_21;
  wire [1:0] K_Alpha_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_2;  // ufix2
  wire [2:0] K_Alpha_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] K_Alpha_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] K_Alpha_treesum_stage2_1;  // ufix3
  wire relopout_6_11;
  wire [1:0] K_Alpha_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_3;  // ufix2
  wire relopout_7_11;
  wire [1:0] K_Alpha_treesum_stage1_4;  // ufix2
  wire [2:0] K_Alpha_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] K_Alpha_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] K_Alpha_treesum_stage2_2;  // ufix3
  wire [3:0] K_Alpha_treesum_stage3_1;  // ufix4
  wire [3:0] K_Alpha_treesum_stage3_2;  // ufix4
  wire [3:0] K_Alpha_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_10;  // ufix3
  wire relopout_2_23;
  wire [1:0] K_Alpha_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_1_1;  // ufix2
  wire relopout_4_23;
  wire [1:0] K_Alpha_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] K_Alpha_treesum_stage1_2_1;  // ufix2
  wire [2:0] K_Alpha_treesum_stage2_3;  // ufix3
  wire [2:0] K_Alpha_treesum_stage2_4;  // ufix3
  wire [2:0] K_Alpha_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_11;  // ufix3
  wire [31:0] K_Alpha_1 [0:39];  // ufix32 [40]
  wire signed [3:0] K_Alpha_add_cast;  // sfix4_E3
  wire signed [35:0] K_Alpha_add_cast_1;  // sfix36
  wire [31:0] K_Alpha_out1;  // ufix32
  wire [31:0] Discrete_PID_Controller1_out1;  // ufix32
  reg [31:0] Discrete_PID_Controller1_out1_1;  // ufix32
  wire pw2_sign_const;  // ufix1
  wire signed [8:0] pw2_shift_const;  // sfix9
  wire [31:0] s_state_out1_5;  // ufix32
  wire [31:0] s_state_out1_6;  // ufix32
  reg [31:0] s_state_out1_7;  // ufix32
  wire [31:0] s_denom_gain1_2;  // ufix32
  reg [31:0] rd_11_reg [0:28];  // ufix32 [29]
  reg [31:0] rd_11_reg_next [0:28];  // ufix32 [29]
  reg [31:0] s_denom_gain1_3;  // ufix32
  wire [31:0] s_denom_acc_out1_1;  // ufix32
  reg [31:0] s_state_out12_bypass_reg;  // ufix32
  wire [31:0] s_state_out1_8;  // ufix32
  reg [31:0] s_state_out1_9;  // ufix32
  wire [31:0] Sum5_out1;  // ufix32
  reg [31:0] rd_14_reg [0:1];  // ufix32 [2]
  wire [31:0] rd_14_reg_next [0:1];  // ufix32 [2]
  wire [31:0] Sum5_out1_1;  // ufix32
  wire [31:0] Product1_out1;  // ufix32
  reg [31:0] Product1_out1_1;  // ufix32
  wire [31:0] ufixout_12;  // uint32
  wire signed [31:0] fixout_12;  // int32
  wire switch_compare_1_12;
  wire [30:0] bitsliceout_12;  // ufix31
  wire signed [31:0] masksignbitout_12;  // int32
  wire isNaN_12;
  wire signed [32:0] uminus_in0_12;  // sfix33
  wire signed [32:0] uminus_25;  // sfix33
  wire signed [31:0] uminusout_12;  // int32
  wire signed [31:0] nanSwitch_12;  // int32
  wire signed [31:0] convout_12;  // int32
  wire relopout_1_25;
  wire relopout_3_25;
  wire relopout_5_13;
  wire [31:0] ufixout_13;  // uint32
  wire signed [31:0] fixout_13;  // int32
  wire switch_compare_1_13;
  wire [30:0] bitsliceout_13;  // ufix31
  wire signed [31:0] masksignbitout_13;  // int32
  wire isNaN_13;
  wire signed [32:0] uminus_in0_13;  // sfix33
  wire signed [32:0] uminus_27;  // sfix33
  wire signed [31:0] uminusout_13;  // int32
  wire signed [31:0] nanSwitch_13;  // int32
  wire signed [31:0] convout_13;  // int32
  wire relopout_1_27;
  wire relopout_3_27;
  wire relopout_2_25;
  wire [1:0] Kr_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] Kr_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] Kr_treesum_stage1_1;  // ufix2
  wire relopout_4_25;
  wire [1:0] Kr_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] Kr_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] Kr_treesum_stage1_2;  // ufix2
  wire [2:0] Kr_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] Kr_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] Kr_treesum_stage2_1;  // ufix3
  wire relopout_6_13;
  wire [1:0] Kr_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] Kr_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] Kr_treesum_stage1_3;  // ufix2
  wire relopout_7_13;
  wire [1:0] Kr_treesum_stage1_4;  // ufix2
  wire [2:0] Kr_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] Kr_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] Kr_treesum_stage2_2;  // ufix3
  wire [3:0] Kr_treesum_stage3_1;  // ufix4
  wire [3:0] Kr_treesum_stage3_2;  // ufix4
  wire [3:0] Kr_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_12;  // ufix3
  wire relopout_2_27;
  wire [1:0] Kr_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] Kr_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] Kr_treesum_stage1_1_1;  // ufix2
  wire relopout_4_27;
  wire [1:0] Kr_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] Kr_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] Kr_treesum_stage1_2_1;  // ufix2
  wire [2:0] Kr_treesum_stage2_3;  // ufix3
  wire [2:0] Kr_treesum_stage2_4;  // ufix3
  wire [2:0] Kr_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_13;  // ufix3
  wire [31:0] Kr_1 [0:39];  // ufix32 [40]
  wire signed [3:0] Kr_add_cast;  // sfix4_E3
  wire signed [35:0] Kr_add_cast_1;  // sfix36
  wire [31:0] Kr_out1;  // ufix32
  reg [31:0] rd_20_reg [0:13];  // ufix32 [14]
  reg [31:0] rd_20_reg_next [0:13];  // ufix32 [14]
  reg [31:0] Kr_out1_1;  // ufix32
  wire [31:0] ufixout_14;  // uint32
  wire signed [31:0] fixout_14;  // int32
  wire switch_compare_1_14;
  wire [30:0] bitsliceout_14;  // ufix31
  wire signed [31:0] masksignbitout_14;  // int32
  wire isNaN_14;
  wire signed [32:0] uminus_in0_14;  // sfix33
  wire signed [32:0] uminus_29;  // sfix33
  wire signed [31:0] uminusout_14;  // int32
  wire signed [31:0] nanSwitch_14;  // int32
  wire signed [31:0] convout_14;  // int32
  wire relopout_1_29;
  wire relopout_3_29;
  wire relopout_5_15;
  wire [31:0] ufixout_15;  // uint32
  wire signed [31:0] fixout_15;  // int32
  wire switch_compare_1_15;
  wire [30:0] bitsliceout_15;  // ufix31
  wire signed [31:0] masksignbitout_15;  // int32
  wire isNaN_15;
  wire signed [32:0] uminus_in0_15;  // sfix33
  wire signed [32:0] uminus_31;  // sfix33
  wire signed [31:0] uminusout_15;  // int32
  wire signed [31:0] nanSwitch_15;  // int32
  wire signed [31:0] convout_15;  // int32
  wire relopout_1_31;
  wire relopout_3_31;
  wire [31:0] ufixout_16;  // uint32
  wire signed [31:0] fixout_16;  // int32
  wire switch_compare_1_16;
  wire [30:0] bitsliceout_16;  // ufix31
  wire signed [31:0] masksignbitout_16;  // int32
  wire isNaN_16;
  wire signed [32:0] uminus_in0_16;  // sfix33
  wire signed [32:0] uminus_33;  // sfix33
  wire signed [31:0] uminusout_16;  // int32
  wire signed [31:0] nanSwitch_16;  // int32
  wire signed [31:0] convout_16;  // int32
  wire relopout_1_33;
  wire relopout_3_33;
  wire relopout_5_17;
  wire [31:0] ufixout_17;  // uint32
  wire signed [31:0] fixout_17;  // int32
  wire switch_compare_1_17;
  wire [30:0] bitsliceout_17;  // ufix31
  wire signed [31:0] masksignbitout_17;  // int32
  wire isNaN_17;
  wire signed [32:0] uminus_in0_17;  // sfix33
  wire signed [32:0] uminus_35;  // sfix33
  wire signed [31:0] uminusout_17;  // int32
  wire signed [31:0] nanSwitch_17;  // int32
  wire signed [31:0] convout_17;  // int32
  wire relopout_1_35;
  wire relopout_3_35;
  wire [31:0] Sum1_out1;  // ufix32
  wire relopout_2_29;
  wire [1:0] P_Beta_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_1;  // ufix2
  wire relopout_4_29;
  wire [1:0] P_Beta_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_2;  // ufix2
  wire [2:0] P_Beta_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] P_Beta_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] P_Beta_treesum_stage2_1;  // ufix3
  wire relopout_6_15;
  wire [1:0] P_Beta_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_3;  // ufix2
  wire relopout_7_15;
  wire [1:0] P_Beta_treesum_stage1_4;  // ufix2
  wire [2:0] P_Beta_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] P_Beta_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] P_Beta_treesum_stage2_2;  // ufix3
  wire [3:0] P_Beta_treesum_stage3_1;  // ufix4
  wire [3:0] P_Beta_treesum_stage3_2;  // ufix4
  wire [3:0] P_Beta_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_14;  // ufix3
  wire relopout_2_31;
  wire [1:0] P_Beta_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_1_1;  // ufix2
  wire relopout_4_31;
  wire [1:0] P_Beta_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] P_Beta_treesum_stage1_2_1;  // ufix2
  wire [2:0] P_Beta_treesum_stage2_3;  // ufix3
  wire [2:0] P_Beta_treesum_stage2_4;  // ufix3
  wire [2:0] P_Beta_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_15;  // ufix3
  wire [31:0] P_Beta_1 [0:39];  // ufix32 [40]
  wire signed [3:0] P_Beta_add_cast;  // sfix4_E3
  wire signed [35:0] P_Beta_add_cast_1;  // sfix36
  wire [31:0] P_Beta_out1;  // ufix32
  wire relopout_2_33;
  wire [1:0] K_Beta_treesum_stage1_sum1_1;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_sum1_2;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_1;  // ufix2
  wire relopout_4_33;
  wire [1:0] K_Beta_treesum_stage1_sum2_1;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_sum2_2;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_2;  // ufix2
  wire [2:0] K_Beta_treesum_stage2_sum1_1;  // ufix3
  wire [2:0] K_Beta_treesum_stage2_sum1_2;  // ufix3
  wire [2:0] K_Beta_treesum_stage2_1;  // ufix3
  wire relopout_6_17;
  wire [1:0] K_Beta_treesum_stage1_sum3_1;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_sum3_2;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_3;  // ufix2
  wire relopout_7_17;
  wire [1:0] K_Beta_treesum_stage1_4;  // ufix2
  wire [2:0] K_Beta_treesum_stage2_sum2_1;  // ufix3
  wire [2:0] K_Beta_treesum_stage2_sum2_2;  // ufix3
  wire [2:0] K_Beta_treesum_stage2_2;  // ufix3
  wire [3:0] K_Beta_treesum_stage3_1;  // ufix4
  wire [3:0] K_Beta_treesum_stage3_2;  // ufix4
  wire [3:0] K_Beta_treesum_stage3_3;  // ufix4
  wire [2:0] matsumout_16;  // ufix3
  wire relopout_2_35;
  wire [1:0] K_Beta_treesum_stage1_sum1_4;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_sum1_5;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_1_1;  // ufix2
  wire relopout_4_35;
  wire [1:0] K_Beta_treesum_stage1_sum2_4;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_sum2_5;  // ufix2
  wire [1:0] K_Beta_treesum_stage1_2_1;  // ufix2
  wire [2:0] K_Beta_treesum_stage2_3;  // ufix3
  wire [2:0] K_Beta_treesum_stage2_4;  // ufix3
  wire [2:0] K_Beta_treesum_stage2_5;  // ufix3
  wire [2:0] matsumout_17;  // ufix3
  wire [31:0] K_Beta_1 [0:39];  // ufix32 [40]
  wire signed [3:0] K_Beta_add_cast;  // sfix4_E3
  wire signed [35:0] K_Beta_add_cast_1;  // sfix36
  wire [31:0] K_Beta_out1;  // ufix32
  wire [31:0] Discrete_PID_Controller2_out1;  // ufix32
  reg [31:0] Discrete_PID_Controller2_out1_1;  // ufix32
  wire pw2_sign_const_1;  // ufix1
  wire signed [8:0] pw2_shift_const_1;  // sfix9
  wire [31:0] s_state_out1_10;  // ufix32
  wire [31:0] s_state_out1_11;  // ufix32
  reg [31:0] s_state_out1_12;  // ufix32
  wire [31:0] s_denom_gain1_4;  // ufix32
  reg [31:0] rd_18_reg [0:28];  // ufix32 [29]
  reg [31:0] rd_18_reg_next [0:28];  // ufix32 [29]
  reg [31:0] s_denom_gain1_5;  // ufix32
  wire [31:0] s_denom_acc_out1_2;  // ufix32
  reg [31:0] s_state_out1_bypass_reg;  // ufix32
  wire [31:0] s_state_out1_13;  // ufix32
  reg [31:0] s_state_out1_14;  // ufix32
  wire [31:0] Sum4_out1;  // ufix32
  reg [31:0] rd_21_reg [0:1];  // ufix32 [2]
  wire [31:0] rd_21_reg_next [0:1];  // ufix32 [2]
  wire [31:0] Sum4_out1_1;  // ufix32
  wire [31:0] Product2_out1;  // ufix32
  reg [31:0] Product2_out1_1;  // ufix32
  reg signed [31:0] rd_6_t_0_0;  // int32
  reg signed [31:0] rd_6_t_0_1;  // int32
  reg signed [31:0] rd_6_t_1;  // int32
  reg signed [31:0] rd_0_t_0_0;  // int32
  reg signed [31:0] rd_0_t_1;  // int32
  reg signed [31:0] rd_4_t_0_0;  // int32
  reg signed [31:0] rd_4_t_0_1;  // int32
  reg signed [31:0] rd_4_t_1;  // int32
  reg signed [31:0] rd_7_t_0_0;  // int32
  reg signed [31:0] rd_7_t_1;  // int32
  reg signed [31:0] rd_13_t_0_0;  // int32
  reg signed [31:0] rd_13_t_0_1;  // int32
  reg signed [31:0] rd_13_t_1;  // int32
  reg signed [31:0] rd_11_t_0_0;  // int32
  reg signed [31:0] rd_11_t_0_1;  // int32
  reg signed [31:0] rd_11_t_1;  // int32
  reg signed [31:0] rd_14_t_0_0;  // int32
  reg signed [31:0] rd_14_t_1;  // int32
  reg signed [31:0] rd_20_t_0_0;  // int32
  reg signed [31:0] rd_20_t_0_1;  // int32
  reg signed [31:0] rd_20_t_1;  // int32
  reg signed [31:0] rd_18_t_0_0;  // int32
  reg signed [31:0] rd_18_t_0_1;  // int32
  reg signed [31:0] rd_18_t_1;  // int32
  reg signed [31:0] rd_21_t_0_0;  // int32
  reg signed [31:0] rd_21_t_1;  // int32


  assign Alpha_1 = Alpha;

  nfp_wire_single u_nfp_wire_single (.nfp_in(Alpha_1),  // single
                                     .nfp_out(ufixout)  // uint32
                                     );

  assign fixout = ufixout;



  assign switch_compare_1 = fixout > 32'sb00000000000000000000000000000000;



  assign bitsliceout = fixout[30:0];



  assign masksignbitout = {1'b0, bitsliceout};



  assign isNaN = masksignbitout == 32'sb01111111110000000000000000000000;



  assign uminus_1 = {masksignbitout[31], masksignbitout};
  assign uminus_in0 =  - (uminus_1);
  assign uminusout = uminus_in0[31:0];



  assign nanSwitch = (isNaN == 1'b0 ? uminusout :
              masksignbitout);



  assign convout = (switch_compare_1 == 1'b0 ? nanSwitch :
              fixout);



  assign relopout_1_1 = convout >= 32'sb10111111011000000000000000000000;



  assign relopout_3_1 = convout >= 32'sb01000000101000000000000000000000;



  assign relopout_5_1 = convout >= 32'sb01000001011100000000000000000000;



  assign Beta_1 = Beta;

  nfp_wire_single u_nfp_wire_single_1 (.nfp_in(Beta_1),  // single
                                       .nfp_out(ufixout_1)  // uint32
                                       );

  assign fixout_1 = ufixout_1;



  assign switch_compare_1_1 = fixout_1 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_1 = fixout_1[30:0];



  assign masksignbitout_1 = {1'b0, bitsliceout_1};



  assign isNaN_1 = masksignbitout_1 == 32'sb01111111110000000000000000000000;



  assign uminus_3 = {masksignbitout_1[31], masksignbitout_1};
  assign uminus_in0_1 =  - (uminus_3);
  assign uminusout_1 = uminus_in0_1[31:0];



  assign nanSwitch_1 = (isNaN_1 == 1'b0 ? uminusout_1 :
              masksignbitout_1);



  assign convout_1 = (switch_compare_1_1 == 1'b0 ? nanSwitch_1 :
              fixout_1);



  assign relopout_1_3 = convout_1 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_3 = convout_1 >= 32'sb01000000101000000000000000000000;



  assign relopout_2_1 = convout >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign Kp_treesum_stage1_sum1_1 = {1'b0, relopout_1_1};
  assign Kp_treesum_stage1_sum1_2 = {1'b0, relopout_2_1};
  assign Kp_treesum_stage1_1 = Kp_treesum_stage1_sum1_1 + Kp_treesum_stage1_sum1_2;



  assign relopout_4_1 = convout >= 32'sb01000001001000000000000000000000;



  assign Kp_treesum_stage1_sum2_1 = {1'b0, relopout_3_1};
  assign Kp_treesum_stage1_sum2_2 = {1'b0, relopout_4_1};
  assign Kp_treesum_stage1_2 = Kp_treesum_stage1_sum2_1 + Kp_treesum_stage1_sum2_2;



  assign Kp_treesum_stage2_sum1_1 = {1'b0, Kp_treesum_stage1_1};
  assign Kp_treesum_stage2_sum1_2 = {1'b0, Kp_treesum_stage1_2};
  assign Kp_treesum_stage2_1 = Kp_treesum_stage2_sum1_1 + Kp_treesum_stage2_sum1_2;



  assign relopout_6_1 = convout >= 32'sb01000001101000000000000000000000;



  assign Kp_treesum_stage1_sum3_1 = {1'b0, relopout_5_1};
  assign Kp_treesum_stage1_sum3_2 = {1'b0, relopout_6_1};
  assign Kp_treesum_stage1_3 = Kp_treesum_stage1_sum3_1 + Kp_treesum_stage1_sum3_2;



  assign relopout_7_1 = convout >= 32'sb01000001110010000000000000000000;



  assign Kp_treesum_stage1_4 = {1'b0, relopout_7_1};



  assign Kp_treesum_stage2_sum2_1 = {1'b0, Kp_treesum_stage1_3};
  assign Kp_treesum_stage2_sum2_2 = {1'b0, Kp_treesum_stage1_4};
  assign Kp_treesum_stage2_2 = Kp_treesum_stage2_sum2_1 + Kp_treesum_stage2_sum2_2;



  assign Kp_treesum_stage3_1 = {1'b0, Kp_treesum_stage2_1};
  assign Kp_treesum_stage3_2 = {1'b0, Kp_treesum_stage2_2};
  assign Kp_treesum_stage3_3 = Kp_treesum_stage3_1 + Kp_treesum_stage3_2;



  assign matsumout = Kp_treesum_stage3_3[2:0];



  assign relopout_2_3 = convout_1 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign Kp_treesum_stage1_sum1_4 = {1'b0, relopout_1_3};
  assign Kp_treesum_stage1_sum1_5 = {1'b0, relopout_2_3};
  assign Kp_treesum_stage1_1_1 = Kp_treesum_stage1_sum1_4 + Kp_treesum_stage1_sum1_5;



  assign relopout_4_3 = convout_1 >= 32'sb01000001001000000000000000000000;



  assign Kp_treesum_stage1_sum2_4 = {1'b0, relopout_3_3};
  assign Kp_treesum_stage1_sum2_5 = {1'b0, relopout_4_3};
  assign Kp_treesum_stage1_2_1 = Kp_treesum_stage1_sum2_4 + Kp_treesum_stage1_sum2_5;



  assign Kp_treesum_stage2_3 = {1'b0, Kp_treesum_stage1_1_1};
  assign Kp_treesum_stage2_4 = {1'b0, Kp_treesum_stage1_2_1};
  assign Kp_treesum_stage2_5 = Kp_treesum_stage2_3 + Kp_treesum_stage2_4;



  assign matsumout_1 = Kp_treesum_stage2_5;



  assign Kp_1[0] = 32'h426bfab0;
  assign Kp_1[1] = 32'h4251a5b0;
  assign Kp_1[2] = 32'h424de3d6;
  assign Kp_1[3] = 32'h4252b9d4;
  assign Kp_1[4] = 32'h425e241a;
  assign Kp_1[5] = 32'h426b9b7a;
  assign Kp_1[6] = 32'h427e810e;
  assign Kp_1[7] = 32'h42912cb1;
  assign Kp_1[8] = 32'h426fc4a8;
  assign Kp_1[9] = 32'h4252a83d;
  assign Kp_1[10] = 32'h424e5e39;
  assign Kp_1[11] = 32'h42544f3b;
  assign Kp_1[12] = 32'h425efadf;
  assign Kp_1[13] = 32'h426d9e8a;
  assign Kp_1[14] = 32'h42811257;
  assign Kp_1[15] = 32'h4294be02;
  assign Kp_1[16] = 32'h4270e6c0;
  assign Kp_1[17] = 32'h42532cfb;
  assign Kp_1[18] = 32'h424e7d60;
  assign Kp_1[19] = 32'h4254bbfe;
  assign Kp_1[20] = 32'h425fd2d8;
  assign Kp_1[21] = 32'h426e2850;
  assign Kp_1[22] = 32'h4281a523;
  assign Kp_1[23] = 32'h429762aa;
  assign Kp_1[24] = 32'h426fbef1;
  assign Kp_1[25] = 32'h4252a483;
  assign Kp_1[26] = 32'h424e02ed;
  assign Kp_1[27] = 32'h42541a57;
  assign Kp_1[28] = 32'h425f5eae;
  assign Kp_1[29] = 32'h426d3ace;
  assign Kp_1[30] = 32'h42817693;
  assign Kp_1[31] = 32'h4295f2d2;
  assign Kp_1[32] = 32'h426d543f;
  assign Kp_1[33] = 32'h42506b48;
  assign Kp_1[34] = 32'h424e6232;
  assign Kp_1[35] = 32'h4253eda1;
  assign Kp_1[36] = 32'h425d691f;
  assign Kp_1[37] = 32'h426e42a6;
  assign Kp_1[38] = 32'h427ce526;
  assign Kp_1[39] = 32'h4296026a;
  assign Kp_add_cast = {1'b0, matsumout_1};
  assign Kp_add_cast_1 = {{29{Kp_add_cast[3]}}, {Kp_add_cast, 3'b000}};
  assign Kp_out1 = Kp_1[$signed({1'b0, matsumout}) + Kp_add_cast_1];



  HDLDroneModel3_tc u_HDLDroneModel3_tc (.clk(clk),
                                         .reset(reset),
                                         .clk_enable(clk_enable),
                                         .enb(enb),
                                         .enb_1_1_1(enb_1_1_1),
                                         .enb_1_20000000_1(enb_1_20000000_1)
                                         );

  always @(posedge clk or posedge reset)
    begin : rd_6_process
      if (reset == 1'b1) begin
        for(rd_6_t_1 = 32'sd0; rd_6_t_1 <= 32'sd13; rd_6_t_1 = rd_6_t_1 + 32'sd1) begin
          rd_6_reg[rd_6_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_6_t_0_1 = 32'sd0; rd_6_t_0_1 <= 32'sd13; rd_6_t_0_1 = rd_6_t_0_1 + 32'sd1) begin
            rd_6_reg[rd_6_t_0_1] <= rd_6_reg_next[rd_6_t_0_1];
          end
        end
      end
    end

  always @* begin
    Kp_out1_1 = rd_6_reg[13];
    rd_6_reg_next[0] = Kp_out1;

    for(rd_6_t_0_0 = 32'sd0; rd_6_t_0_0 <= 32'sd12; rd_6_t_0_0 = rd_6_t_0_0 + 32'sd1) begin
      rd_6_reg_next[rd_6_t_0_0 + 32'sd1] = rd_6_reg[rd_6_t_0_0];
    end

  end



  assign Rates[0] = Rates_0;
  assign Rates[1] = Rates_1;
  assign Rates[2] = Rates_2;

  always @(posedge clk or posedge reset)
    begin : rd_0_process
      if (reset == 1'b1) begin
        for(rd_0_t_1 = 32'sd0; rd_0_t_1 <= 32'sd2; rd_0_t_1 = rd_0_t_1 + 32'sd1) begin
          Rates_3[rd_0_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0 = 32'sd0; rd_0_t_0_0 <= 32'sd2; rd_0_t_0_0 = rd_0_t_0_0 + 32'sd1) begin
            Rates_3[rd_0_t_0_0] <= Rates[rd_0_t_0_0];
          end
        end
      end
    end



  assign Alpha_2 = Alpha;

  nfp_wire_single u_nfp_wire_single_2 (.nfp_in(Alpha_2),  // single
                                       .nfp_out(ufixout_2)  // uint32
                                       );

  assign fixout_2 = ufixout_2;



  assign switch_compare_1_2 = fixout_2 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_2 = fixout_2[30:0];



  assign masksignbitout_2 = {1'b0, bitsliceout_2};



  assign isNaN_2 = masksignbitout_2 == 32'sb01111111110000000000000000000000;



  assign uminus_5 = {masksignbitout_2[31], masksignbitout_2};
  assign uminus_in0_2 =  - (uminus_5);
  assign uminusout_2 = uminus_in0_2[31:0];



  assign nanSwitch_2 = (isNaN_2 == 1'b0 ? uminusout_2 :
              masksignbitout_2);



  assign convout_2 = (switch_compare_1_2 == 1'b0 ? nanSwitch_2 :
              fixout_2);



  assign relopout_1_5 = convout_2 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_5 = convout_2 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_3 = convout_2 >= 32'sb01000001011100000000000000000000;



  assign Beta_2 = Beta;

  nfp_wire_single u_nfp_wire_single_3 (.nfp_in(Beta_2),  // single
                                       .nfp_out(ufixout_3)  // uint32
                                       );

  assign fixout_3 = ufixout_3;



  assign switch_compare_1_3 = fixout_3 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_3 = fixout_3[30:0];



  assign masksignbitout_3 = {1'b0, bitsliceout_3};



  assign isNaN_3 = masksignbitout_3 == 32'sb01111111110000000000000000000000;



  assign uminus_7 = {masksignbitout_3[31], masksignbitout_3};
  assign uminus_in0_3 =  - (uminus_7);
  assign uminusout_3 = uminus_in0_3[31:0];



  assign nanSwitch_3 = (isNaN_3 == 1'b0 ? uminusout_3 :
              masksignbitout_3);



  assign convout_3 = (switch_compare_1_3 == 1'b0 ? nanSwitch_3 :
              fixout_3);



  assign relopout_1_7 = convout_3 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_7 = convout_3 >= 32'sb01000000101000000000000000000000;



  nfp_wire_single u_nfp_wire_single_4 (.nfp_in(Alpha_2),  // single
                                       .nfp_out(ufixout_4)  // uint32
                                       );

  assign fixout_4 = ufixout_4;



  assign switch_compare_1_4 = fixout_4 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_4 = fixout_4[30:0];



  assign masksignbitout_4 = {1'b0, bitsliceout_4};



  assign isNaN_4 = masksignbitout_4 == 32'sb01111111110000000000000000000000;



  assign uminus_9 = {masksignbitout_4[31], masksignbitout_4};
  assign uminus_in0_4 =  - (uminus_9);
  assign uminusout_4 = uminus_in0_4[31:0];



  assign nanSwitch_4 = (isNaN_4 == 1'b0 ? uminusout_4 :
              masksignbitout_4);



  assign convout_4 = (switch_compare_1_4 == 1'b0 ? nanSwitch_4 :
              fixout_4);



  assign relopout_1_9 = convout_4 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_9 = convout_4 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_5 = convout_4 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_5 (.nfp_in(Beta_2),  // single
                                       .nfp_out(ufixout_5)  // uint32
                                       );

  assign fixout_5 = ufixout_5;



  assign switch_compare_1_5 = fixout_5 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_5 = fixout_5[30:0];



  assign masksignbitout_5 = {1'b0, bitsliceout_5};



  assign isNaN_5 = masksignbitout_5 == 32'sb01111111110000000000000000000000;



  assign uminus_11 = {masksignbitout_5[31], masksignbitout_5};
  assign uminus_in0_5 =  - (uminus_11);
  assign uminusout_5 = uminus_in0_5[31:0];



  assign nanSwitch_5 = (isNaN_5 == 1'b0 ? uminusout_5 :
              masksignbitout_5);



  assign convout_5 = (switch_compare_1_5 == 1'b0 ? nanSwitch_5 :
              fixout_5);



  assign relopout_1_11 = convout_5 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_11 = convout_5 >= 32'sb01000000101000000000000000000000;



  nfp_sub_single u_nfp_sub_comp (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .nfp_in1(Demands_2),  // single
                                 .nfp_in2(Aos),  // single
                                 .nfp_out(Sum3_out1)  // single
                                 );

  assign relopout_2_5 = convout_2 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign P_Phi_treesum_stage1_sum1_1 = {1'b0, relopout_1_5};
  assign P_Phi_treesum_stage1_sum1_2 = {1'b0, relopout_2_5};
  assign P_Phi_treesum_stage1_1 = P_Phi_treesum_stage1_sum1_1 + P_Phi_treesum_stage1_sum1_2;



  assign relopout_4_5 = convout_2 >= 32'sb01000001001000000000000000000000;



  assign P_Phi_treesum_stage1_sum2_1 = {1'b0, relopout_3_5};
  assign P_Phi_treesum_stage1_sum2_2 = {1'b0, relopout_4_5};
  assign P_Phi_treesum_stage1_2 = P_Phi_treesum_stage1_sum2_1 + P_Phi_treesum_stage1_sum2_2;



  assign P_Phi_treesum_stage2_sum1_1 = {1'b0, P_Phi_treesum_stage1_1};
  assign P_Phi_treesum_stage2_sum1_2 = {1'b0, P_Phi_treesum_stage1_2};
  assign P_Phi_treesum_stage2_1 = P_Phi_treesum_stage2_sum1_1 + P_Phi_treesum_stage2_sum1_2;



  assign relopout_6_3 = convout_2 >= 32'sb01000001101000000000000000000000;



  assign P_Phi_treesum_stage1_sum3_1 = {1'b0, relopout_5_3};
  assign P_Phi_treesum_stage1_sum3_2 = {1'b0, relopout_6_3};
  assign P_Phi_treesum_stage1_3 = P_Phi_treesum_stage1_sum3_1 + P_Phi_treesum_stage1_sum3_2;



  assign relopout_7_3 = convout_2 >= 32'sb01000001110010000000000000000000;



  assign P_Phi_treesum_stage1_4 = {1'b0, relopout_7_3};



  assign P_Phi_treesum_stage2_sum2_1 = {1'b0, P_Phi_treesum_stage1_3};
  assign P_Phi_treesum_stage2_sum2_2 = {1'b0, P_Phi_treesum_stage1_4};
  assign P_Phi_treesum_stage2_2 = P_Phi_treesum_stage2_sum2_1 + P_Phi_treesum_stage2_sum2_2;



  assign P_Phi_treesum_stage3_1 = {1'b0, P_Phi_treesum_stage2_1};
  assign P_Phi_treesum_stage3_2 = {1'b0, P_Phi_treesum_stage2_2};
  assign P_Phi_treesum_stage3_3 = P_Phi_treesum_stage3_1 + P_Phi_treesum_stage3_2;



  assign matsumout_2 = P_Phi_treesum_stage3_3[2:0];



  assign relopout_2_7 = convout_3 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign P_Phi_treesum_stage1_sum1_4 = {1'b0, relopout_1_7};
  assign P_Phi_treesum_stage1_sum1_5 = {1'b0, relopout_2_7};
  assign P_Phi_treesum_stage1_1_1 = P_Phi_treesum_stage1_sum1_4 + P_Phi_treesum_stage1_sum1_5;



  assign relopout_4_7 = convout_3 >= 32'sb01000001001000000000000000000000;



  assign P_Phi_treesum_stage1_sum2_4 = {1'b0, relopout_3_7};
  assign P_Phi_treesum_stage1_sum2_5 = {1'b0, relopout_4_7};
  assign P_Phi_treesum_stage1_2_1 = P_Phi_treesum_stage1_sum2_4 + P_Phi_treesum_stage1_sum2_5;



  assign P_Phi_treesum_stage2_3 = {1'b0, P_Phi_treesum_stage1_1_1};
  assign P_Phi_treesum_stage2_4 = {1'b0, P_Phi_treesum_stage1_2_1};
  assign P_Phi_treesum_stage2_5 = P_Phi_treesum_stage2_3 + P_Phi_treesum_stage2_4;



  assign matsumout_3 = P_Phi_treesum_stage2_5;



  assign P_Phi_1[0] = 32'h3d4ccccd;
  assign P_Phi_1[1] = 32'h3d4ccccd;
  assign P_Phi_1[2] = 32'h3d4ccccd;
  assign P_Phi_1[3] = 32'h3d4ccccd;
  assign P_Phi_1[4] = 32'h3d4ccccd;
  assign P_Phi_1[5] = 32'h3d4ccccd;
  assign P_Phi_1[6] = 32'h3d4ccccd;
  assign P_Phi_1[7] = 32'h3d4ccccd;
  assign P_Phi_1[8] = 32'h3d4ccccd;
  assign P_Phi_1[9] = 32'h3d4ccccd;
  assign P_Phi_1[10] = 32'h3d4ccccd;
  assign P_Phi_1[11] = 32'h3d4ccccd;
  assign P_Phi_1[12] = 32'h3d4ccccd;
  assign P_Phi_1[13] = 32'h3d4ccccd;
  assign P_Phi_1[14] = 32'h3d4ccccd;
  assign P_Phi_1[15] = 32'h3d4ccccd;
  assign P_Phi_1[16] = 32'h3d4ccccd;
  assign P_Phi_1[17] = 32'h3d4ccccd;
  assign P_Phi_1[18] = 32'h3d4ccccd;
  assign P_Phi_1[19] = 32'h3d4ccccd;
  assign P_Phi_1[20] = 32'h3d4ccccd;
  assign P_Phi_1[21] = 32'h3d4ccccd;
  assign P_Phi_1[22] = 32'h3d4ccccd;
  assign P_Phi_1[23] = 32'h3d4ccccd;
  assign P_Phi_1[24] = 32'h3d4ccccd;
  assign P_Phi_1[25] = 32'h3d4ccccd;
  assign P_Phi_1[26] = 32'h3d4ccccd;
  assign P_Phi_1[27] = 32'h3d4ccccd;
  assign P_Phi_1[28] = 32'h3d4ccccd;
  assign P_Phi_1[29] = 32'h3d4ccccd;
  assign P_Phi_1[30] = 32'h3d4ccccd;
  assign P_Phi_1[31] = 32'h3d4ccccd;
  assign P_Phi_1[32] = 32'h3d4ccccd;
  assign P_Phi_1[33] = 32'h3d4ccccd;
  assign P_Phi_1[34] = 32'h3d4ccccd;
  assign P_Phi_1[35] = 32'h3d4ccccd;
  assign P_Phi_1[36] = 32'h3d4ccccd;
  assign P_Phi_1[37] = 32'h3d4ccccd;
  assign P_Phi_1[38] = 32'h3d4ccccd;
  assign P_Phi_1[39] = 32'h3d4ccccd;
  assign P_Phi_add_cast = {1'b0, matsumout_3};
  assign P_Phi_add_cast_1 = {{29{P_Phi_add_cast[3]}}, {P_Phi_add_cast, 3'b000}};
  assign P_Phi_out1 = P_Phi_1[$signed({1'b0, matsumout_2}) + P_Phi_add_cast_1];



  assign relopout_2_9 = convout_4 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign K_Phi_treesum_stage1_sum1_1 = {1'b0, relopout_1_9};
  assign K_Phi_treesum_stage1_sum1_2 = {1'b0, relopout_2_9};
  assign K_Phi_treesum_stage1_1 = K_Phi_treesum_stage1_sum1_1 + K_Phi_treesum_stage1_sum1_2;



  assign relopout_4_9 = convout_4 >= 32'sb01000001001000000000000000000000;



  assign K_Phi_treesum_stage1_sum2_1 = {1'b0, relopout_3_9};
  assign K_Phi_treesum_stage1_sum2_2 = {1'b0, relopout_4_9};
  assign K_Phi_treesum_stage1_2 = K_Phi_treesum_stage1_sum2_1 + K_Phi_treesum_stage1_sum2_2;



  assign K_Phi_treesum_stage2_sum1_1 = {1'b0, K_Phi_treesum_stage1_1};
  assign K_Phi_treesum_stage2_sum1_2 = {1'b0, K_Phi_treesum_stage1_2};
  assign K_Phi_treesum_stage2_1 = K_Phi_treesum_stage2_sum1_1 + K_Phi_treesum_stage2_sum1_2;



  assign relopout_6_5 = convout_4 >= 32'sb01000001101000000000000000000000;



  assign K_Phi_treesum_stage1_sum3_1 = {1'b0, relopout_5_5};
  assign K_Phi_treesum_stage1_sum3_2 = {1'b0, relopout_6_5};
  assign K_Phi_treesum_stage1_3 = K_Phi_treesum_stage1_sum3_1 + K_Phi_treesum_stage1_sum3_2;



  assign relopout_7_5 = convout_4 >= 32'sb01000001110010000000000000000000;



  assign K_Phi_treesum_stage1_4 = {1'b0, relopout_7_5};



  assign K_Phi_treesum_stage2_sum2_1 = {1'b0, K_Phi_treesum_stage1_3};
  assign K_Phi_treesum_stage2_sum2_2 = {1'b0, K_Phi_treesum_stage1_4};
  assign K_Phi_treesum_stage2_2 = K_Phi_treesum_stage2_sum2_1 + K_Phi_treesum_stage2_sum2_2;



  assign K_Phi_treesum_stage3_1 = {1'b0, K_Phi_treesum_stage2_1};
  assign K_Phi_treesum_stage3_2 = {1'b0, K_Phi_treesum_stage2_2};
  assign K_Phi_treesum_stage3_3 = K_Phi_treesum_stage3_1 + K_Phi_treesum_stage3_2;



  assign matsumout_4 = K_Phi_treesum_stage3_3[2:0];



  assign relopout_2_11 = convout_5 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign K_Phi_treesum_stage1_sum1_4 = {1'b0, relopout_1_11};
  assign K_Phi_treesum_stage1_sum1_5 = {1'b0, relopout_2_11};
  assign K_Phi_treesum_stage1_1_1 = K_Phi_treesum_stage1_sum1_4 + K_Phi_treesum_stage1_sum1_5;



  assign relopout_4_11 = convout_5 >= 32'sb01000001001000000000000000000000;



  assign K_Phi_treesum_stage1_sum2_4 = {1'b0, relopout_3_11};
  assign K_Phi_treesum_stage1_sum2_5 = {1'b0, relopout_4_11};
  assign K_Phi_treesum_stage1_2_1 = K_Phi_treesum_stage1_sum2_4 + K_Phi_treesum_stage1_sum2_5;



  assign K_Phi_treesum_stage2_3 = {1'b0, K_Phi_treesum_stage1_1_1};
  assign K_Phi_treesum_stage2_4 = {1'b0, K_Phi_treesum_stage1_2_1};
  assign K_Phi_treesum_stage2_5 = K_Phi_treesum_stage2_3 + K_Phi_treesum_stage2_4;



  assign matsumout_5 = K_Phi_treesum_stage2_5;



  assign K_Phi_1[0] = 32'h40a49e30;
  assign K_Phi_1[1] = 32'h40a5fb70;
  assign K_Phi_1[2] = 32'h40a6a263;
  assign K_Phi_1[3] = 32'h40a713b3;
  assign K_Phi_1[4] = 32'h40a4212c;
  assign K_Phi_1[5] = 32'h40a51862;
  assign K_Phi_1[6] = 32'h40a63f9e;
  assign K_Phi_1[7] = 32'h40aa57a9;
  assign K_Phi_1[8] = 32'h40a595fa;
  assign K_Phi_1[9] = 32'h40a5ee99;
  assign K_Phi_1[10] = 32'h40a6492f;
  assign K_Phi_1[11] = 32'h40a6ca34;
  assign K_Phi_1[12] = 32'h40a46fbe;
  assign K_Phi_1[13] = 32'h40a48dbd;
  assign K_Phi_1[14] = 32'h40a623e4;
  assign K_Phi_1[15] = 32'h40a9e7a2;
  assign K_Phi_1[16] = 32'h40a4f6ab;
  assign K_Phi_1[17] = 32'h40a5969d;
  assign K_Phi_1[18] = 32'h40a65d80;
  assign K_Phi_1[19] = 32'h40a6caa8;
  assign K_Phi_1[20] = 32'h40a47821;
  assign K_Phi_1[21] = 32'h40a48679;
  assign K_Phi_1[22] = 32'h40a6b4b2;
  assign K_Phi_1[23] = 32'h40a9651e;
  assign K_Phi_1[24] = 32'h40a54c76;
  assign K_Phi_1[25] = 32'h40a5e816;
  assign K_Phi_1[26] = 32'h40a68908;
  assign K_Phi_1[27] = 32'h40a6db1e;
  assign K_Phi_1[28] = 32'h40a4365b;
  assign K_Phi_1[29] = 32'h40a4a06c;
  assign K_Phi_1[30] = 32'h40a5e572;
  assign K_Phi_1[31] = 32'h40a9525c;
  assign K_Phi_1[32] = 32'h40a4edb5;
  assign K_Phi_1[33] = 32'h40a853e4;
  assign K_Phi_1[34] = 32'h40a65e3e;
  assign K_Phi_1[35] = 32'h40a6c0d9;
  assign K_Phi_1[36] = 32'h40a44bc8;
  assign K_Phi_1[37] = 32'h40a47eeb;
  assign K_Phi_1[38] = 32'h40a69766;
  assign K_Phi_1[39] = 32'h40a88f1f;
  assign K_Phi_add_cast = {1'b0, matsumout_5};
  assign K_Phi_add_cast_1 = {{29{K_Phi_add_cast[3]}}, {K_Phi_add_cast, 3'b000}};
  assign K_Phi_out1 = K_Phi_1[$signed({1'b0, matsumout_4}) + K_Phi_add_cast_1];



  Discrete_PID_Controller u_Discrete_PID_Controller (.clk(clk),
                                                     .reset(reset),
                                                     .enb_1_20000000_1(enb_1_20000000_1),
                                                     .enb(enb),
                                                     .u(Sum3_out1),  // single
                                                     .P(P_Phi_out1),  // single
                                                     .I(K_Phi_out1),  // single
                                                     .y(Discrete_PID_Controller_out1)  // single
                                                     );

  always @(posedge clk or posedge reset)
    begin : rd_1_process
      if (reset == 1'b1) begin
        Discrete_PID_Controller_out1_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Discrete_PID_Controller_out1_1 <= Discrete_PID_Controller_out1;
        end
      end
    end



  assign kconst = 32'h41200000;



  always @(posedge clk or posedge reset)
    begin : rd_2_process
      if (reset == 1'b1) begin
        kconst_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  assign s_state_out1_1 = s_state_out1;

  always @(posedge clk or posedge reset)
    begin : rd_3_process
      if (reset == 1'b1) begin
        s_state_out1_2 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          s_state_out1_2 <= s_state_out1_1;
        end
      end
    end



  nfp_mul_single u_nfp_mul_comp (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .nfp_in1(kconst_1),  // single
                                 .nfp_in2(s_state_out1_2),  // single
                                 .nfp_out(s_denom_gain1)  // single
                                 );

  always @(posedge clk or posedge reset)
    begin : rd_4_process
      if (reset == 1'b1) begin
        for(rd_4_t_1 = 32'sd0; rd_4_t_1 <= 32'sd22; rd_4_t_1 = rd_4_t_1 + 32'sd1) begin
          rd_4_reg[rd_4_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_4_t_0_1 = 32'sd0; rd_4_t_0_1 <= 32'sd22; rd_4_t_0_1 = rd_4_t_0_1 + 32'sd1) begin
            rd_4_reg[rd_4_t_0_1] <= rd_4_reg_next[rd_4_t_0_1];
          end
        end
      end
    end

  always @* begin
    s_denom_gain1_1 = rd_4_reg[22];
    rd_4_reg_next[0] = s_denom_gain1;

    for(rd_4_t_0_0 = 32'sd0; rd_4_t_0_0 <= 32'sd21; rd_4_t_0_0 = rd_4_t_0_0 + 32'sd1) begin
      rd_4_reg_next[rd_4_t_0_0 + 32'sd1] = rd_4_reg[rd_4_t_0_0];
    end

  end



  nfp_sub_single u_nfp_sub_comp_1 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Discrete_PID_Controller_out1_1),  // single
                                   .nfp_in2(s_denom_gain1_1),  // single
                                   .nfp_out(s_denom_acc_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : s_state_out11_bypass_process
      if (reset == 1'b1) begin
        s_state_out11_bypass_reg <= 32'h00000000;
      end
      else begin
        if (enb_1_20000000_1) begin
          s_state_out11_bypass_reg <= s_denom_acc_out1;
        end
      end
    end

  assign s_state_out1 = (enb_1_20000000_1 == 1'b1 ? s_denom_acc_out1 :
              s_state_out11_bypass_reg);



  assign s_state_out1_3 = s_state_out1;

  always @(posedge clk or posedge reset)
    begin : rd_5_process
      if (reset == 1'b1) begin
        s_state_out1_4 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          s_state_out1_4 <= s_state_out1_3;
        end
      end
    end



  nfp_sub_single u_nfp_sub_comp_2 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Rates_3[0]),  // single
                                   .nfp_in2(s_state_out1_4),  // single
                                   .nfp_out(Sum6_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : rd_7_process
      if (reset == 1'b1) begin
        for(rd_7_t_1 = 32'sd0; rd_7_t_1 <= 32'sd1; rd_7_t_1 = rd_7_t_1 + 32'sd1) begin
          rd_7_reg[rd_7_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_7_t_0_0 = 32'sd0; rd_7_t_0_0 <= 32'sd1; rd_7_t_0_0 = rd_7_t_0_0 + 32'sd1) begin
            rd_7_reg[rd_7_t_0_0] <= rd_7_reg_next[rd_7_t_0_0];
          end
        end
      end
    end

  assign Sum6_out1_1 = rd_7_reg[1];
  assign rd_7_reg_next[0] = Sum6_out1;
  assign rd_7_reg_next[1] = rd_7_reg[0];



  nfp_mul_single u_nfp_mul_comp_1 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Kp_out1_1),  // single
                                   .nfp_in2(Sum6_out1_1),  // single
                                   .nfp_out(Product_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : rd_8_process
      if (reset == 1'b1) begin
        Product_out1_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Product_out1_1 <= Product_out1;
        end
      end
    end



  assign Out1 = Product_out1_1;

  nfp_wire_single u_nfp_wire_single_6 (.nfp_in(Alpha_1),  // single
                                       .nfp_out(ufixout_6)  // uint32
                                       );

  assign fixout_6 = ufixout_6;



  assign switch_compare_1_6 = fixout_6 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_6 = fixout_6[30:0];



  assign masksignbitout_6 = {1'b0, bitsliceout_6};



  assign isNaN_6 = masksignbitout_6 == 32'sb01111111110000000000000000000000;



  assign uminus_13 = {masksignbitout_6[31], masksignbitout_6};
  assign uminus_in0_6 =  - (uminus_13);
  assign uminusout_6 = uminus_in0_6[31:0];



  assign nanSwitch_6 = (isNaN_6 == 1'b0 ? uminusout_6 :
              masksignbitout_6);



  assign convout_6 = (switch_compare_1_6 == 1'b0 ? nanSwitch_6 :
              fixout_6);



  assign relopout_1_13 = convout_6 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_13 = convout_6 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_7 = convout_6 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_7 (.nfp_in(Beta_1),  // single
                                       .nfp_out(ufixout_7)  // uint32
                                       );

  assign fixout_7 = ufixout_7;



  assign switch_compare_1_7 = fixout_7 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_7 = fixout_7[30:0];



  assign masksignbitout_7 = {1'b0, bitsliceout_7};



  assign isNaN_7 = masksignbitout_7 == 32'sb01111111110000000000000000000000;



  assign uminus_15 = {masksignbitout_7[31], masksignbitout_7};
  assign uminus_in0_7 =  - (uminus_15);
  assign uminusout_7 = uminus_in0_7[31:0];



  assign nanSwitch_7 = (isNaN_7 == 1'b0 ? uminusout_7 :
              masksignbitout_7);



  assign convout_7 = (switch_compare_1_7 == 1'b0 ? nanSwitch_7 :
              fixout_7);



  assign relopout_1_15 = convout_7 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_15 = convout_7 >= 32'sb01000000101000000000000000000000;



  assign relopout_2_13 = convout_6 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign Kq_treesum_stage1_sum1_1 = {1'b0, relopout_1_13};
  assign Kq_treesum_stage1_sum1_2 = {1'b0, relopout_2_13};
  assign Kq_treesum_stage1_1 = Kq_treesum_stage1_sum1_1 + Kq_treesum_stage1_sum1_2;



  assign relopout_4_13 = convout_6 >= 32'sb01000001001000000000000000000000;



  assign Kq_treesum_stage1_sum2_1 = {1'b0, relopout_3_13};
  assign Kq_treesum_stage1_sum2_2 = {1'b0, relopout_4_13};
  assign Kq_treesum_stage1_2 = Kq_treesum_stage1_sum2_1 + Kq_treesum_stage1_sum2_2;



  assign Kq_treesum_stage2_sum1_1 = {1'b0, Kq_treesum_stage1_1};
  assign Kq_treesum_stage2_sum1_2 = {1'b0, Kq_treesum_stage1_2};
  assign Kq_treesum_stage2_1 = Kq_treesum_stage2_sum1_1 + Kq_treesum_stage2_sum1_2;



  assign relopout_6_7 = convout_6 >= 32'sb01000001101000000000000000000000;



  assign Kq_treesum_stage1_sum3_1 = {1'b0, relopout_5_7};
  assign Kq_treesum_stage1_sum3_2 = {1'b0, relopout_6_7};
  assign Kq_treesum_stage1_3 = Kq_treesum_stage1_sum3_1 + Kq_treesum_stage1_sum3_2;



  assign relopout_7_7 = convout_6 >= 32'sb01000001110010000000000000000000;



  assign Kq_treesum_stage1_4 = {1'b0, relopout_7_7};



  assign Kq_treesum_stage2_sum2_1 = {1'b0, Kq_treesum_stage1_3};
  assign Kq_treesum_stage2_sum2_2 = {1'b0, Kq_treesum_stage1_4};
  assign Kq_treesum_stage2_2 = Kq_treesum_stage2_sum2_1 + Kq_treesum_stage2_sum2_2;



  assign Kq_treesum_stage3_1 = {1'b0, Kq_treesum_stage2_1};
  assign Kq_treesum_stage3_2 = {1'b0, Kq_treesum_stage2_2};
  assign Kq_treesum_stage3_3 = Kq_treesum_stage3_1 + Kq_treesum_stage3_2;



  assign matsumout_6 = Kq_treesum_stage3_3[2:0];



  assign relopout_2_15 = convout_7 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign Kq_treesum_stage1_sum1_4 = {1'b0, relopout_1_15};
  assign Kq_treesum_stage1_sum1_5 = {1'b0, relopout_2_15};
  assign Kq_treesum_stage1_1_1 = Kq_treesum_stage1_sum1_4 + Kq_treesum_stage1_sum1_5;



  assign relopout_4_15 = convout_7 >= 32'sb01000001001000000000000000000000;



  assign Kq_treesum_stage1_sum2_4 = {1'b0, relopout_3_15};
  assign Kq_treesum_stage1_sum2_5 = {1'b0, relopout_4_15};
  assign Kq_treesum_stage1_2_1 = Kq_treesum_stage1_sum2_4 + Kq_treesum_stage1_sum2_5;



  assign Kq_treesum_stage2_3 = {1'b0, Kq_treesum_stage1_1_1};
  assign Kq_treesum_stage2_4 = {1'b0, Kq_treesum_stage1_2_1};
  assign Kq_treesum_stage2_5 = Kq_treesum_stage2_3 + Kq_treesum_stage2_4;



  assign matsumout_7 = Kq_treesum_stage2_5;



  assign Kq_1[0] = 32'hc3346376;
  assign Kq_1[1] = 32'hc3374643;
  assign Kq_1[2] = 32'hc32e9a00;
  assign Kq_1[3] = 32'hc32dce7b;
  assign Kq_1[4] = 32'hc3355501;
  assign Kq_1[5] = 32'hc346dea9;
  assign Kq_1[6] = 32'hc365dc48;
  assign Kq_1[7] = 32'hc38b9356;
  assign Kq_1[8] = 32'hc34324e9;
  assign Kq_1[9] = 32'hc335d0b0;
  assign Kq_1[10] = 32'hc32e5176;
  assign Kq_1[11] = 32'hc32da680;
  assign Kq_1[12] = 32'hc33516c7;
  assign Kq_1[13] = 32'hc3466668;
  assign Kq_1[14] = 32'hc3650fc9;
  assign Kq_1[15] = 32'hc38b641b;
  assign Kq_1[16] = 32'hc33eaa57;
  assign Kq_1[17] = 32'hc3345293;
  assign Kq_1[18] = 32'hc32e0861;
  assign Kq_1[19] = 32'hc32d7e60;
  assign Kq_1[20] = 32'hc334e08a;
  assign Kq_1[21] = 32'hc345ead1;
  assign Kq_1[22] = 32'hc3644555;
  assign Kq_1[23] = 32'hc38b416b;
  assign Kq_1[24] = 32'hc3430dfb;
  assign Kq_1[25] = 32'hc335d0d0;
  assign Kq_1[26] = 32'hc32e5595;
  assign Kq_1[27] = 32'hc32da0c7;
  assign Kq_1[28] = 32'hc33516eb;
  assign Kq_1[29] = 32'hc346668a;
  assign Kq_1[30] = 32'hc3651025;
  assign Kq_1[31] = 32'hc38b6278;
  assign Kq_1[32] = 32'hc333f0ff;
  assign Kq_1[33] = 32'hc337d06a;
  assign Kq_1[34] = 32'hc32e9a1a;
  assign Kq_1[35] = 32'hc32dce8d;
  assign Kq_1[36] = 32'hc3355527;
  assign Kq_1[37] = 32'hc346d789;
  assign Kq_1[38] = 32'hc365ddad;
  assign Kq_1[39] = 32'hc38b9dee;
  assign Kq_add_cast = {1'b0, matsumout_7};
  assign Kq_add_cast_1 = {{29{Kq_add_cast[3]}}, {Kq_add_cast, 3'b000}};
  assign Kq_out1 = Kq_1[$signed({1'b0, matsumout_6}) + Kq_add_cast_1];



  always @(posedge clk or posedge reset)
    begin : rd_13_process
      if (reset == 1'b1) begin
        for(rd_13_t_1 = 32'sd0; rd_13_t_1 <= 32'sd13; rd_13_t_1 = rd_13_t_1 + 32'sd1) begin
          rd_13_reg[rd_13_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_13_t_0_1 = 32'sd0; rd_13_t_0_1 <= 32'sd13; rd_13_t_0_1 = rd_13_t_0_1 + 32'sd1) begin
            rd_13_reg[rd_13_t_0_1] <= rd_13_reg_next[rd_13_t_0_1];
          end
        end
      end
    end

  always @* begin
    Kq_out1_1 = rd_13_reg[13];
    rd_13_reg_next[0] = Kq_out1;

    for(rd_13_t_0_0 = 32'sd0; rd_13_t_0_0 <= 32'sd12; rd_13_t_0_0 = rd_13_t_0_0 + 32'sd1) begin
      rd_13_reg_next[rd_13_t_0_0 + 32'sd1] = rd_13_reg[rd_13_t_0_0];
    end

  end



  nfp_wire_single u_nfp_wire_single_8 (.nfp_in(Alpha_2),  // single
                                       .nfp_out(ufixout_8)  // uint32
                                       );

  assign fixout_8 = ufixout_8;



  assign switch_compare_1_8 = fixout_8 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_8 = fixout_8[30:0];



  assign masksignbitout_8 = {1'b0, bitsliceout_8};



  assign isNaN_8 = masksignbitout_8 == 32'sb01111111110000000000000000000000;



  assign uminus_17 = {masksignbitout_8[31], masksignbitout_8};
  assign uminus_in0_8 =  - (uminus_17);
  assign uminusout_8 = uminus_in0_8[31:0];



  assign nanSwitch_8 = (isNaN_8 == 1'b0 ? uminusout_8 :
              masksignbitout_8);



  assign convout_8 = (switch_compare_1_8 == 1'b0 ? nanSwitch_8 :
              fixout_8);



  assign relopout_1_17 = convout_8 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_17 = convout_8 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_9 = convout_8 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_9 (.nfp_in(Beta_2),  // single
                                       .nfp_out(ufixout_9)  // uint32
                                       );

  assign fixout_9 = ufixout_9;



  assign switch_compare_1_9 = fixout_9 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_9 = fixout_9[30:0];



  assign masksignbitout_9 = {1'b0, bitsliceout_9};



  assign isNaN_9 = masksignbitout_9 == 32'sb01111111110000000000000000000000;



  assign uminus_19 = {masksignbitout_9[31], masksignbitout_9};
  assign uminus_in0_9 =  - (uminus_19);
  assign uminusout_9 = uminus_in0_9[31:0];



  assign nanSwitch_9 = (isNaN_9 == 1'b0 ? uminusout_9 :
              masksignbitout_9);



  assign convout_9 = (switch_compare_1_9 == 1'b0 ? nanSwitch_9 :
              fixout_9);



  assign relopout_1_19 = convout_9 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_19 = convout_9 >= 32'sb01000000101000000000000000000000;



  nfp_wire_single u_nfp_wire_single_10 (.nfp_in(Alpha_2),  // single
                                        .nfp_out(ufixout_10)  // uint32
                                        );

  assign fixout_10 = ufixout_10;



  assign switch_compare_1_10 = fixout_10 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_10 = fixout_10[30:0];



  assign masksignbitout_10 = {1'b0, bitsliceout_10};



  assign isNaN_10 = masksignbitout_10 == 32'sb01111111110000000000000000000000;



  assign uminus_21 = {masksignbitout_10[31], masksignbitout_10};
  assign uminus_in0_10 =  - (uminus_21);
  assign uminusout_10 = uminus_in0_10[31:0];



  assign nanSwitch_10 = (isNaN_10 == 1'b0 ? uminusout_10 :
              masksignbitout_10);



  assign convout_10 = (switch_compare_1_10 == 1'b0 ? nanSwitch_10 :
              fixout_10);



  assign relopout_1_21 = convout_10 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_21 = convout_10 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_11 = convout_10 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_11 (.nfp_in(Beta_2),  // single
                                        .nfp_out(ufixout_11)  // uint32
                                        );

  assign fixout_11 = ufixout_11;



  assign switch_compare_1_11 = fixout_11 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_11 = fixout_11[30:0];



  assign masksignbitout_11 = {1'b0, bitsliceout_11};



  assign isNaN_11 = masksignbitout_11 == 32'sb01111111110000000000000000000000;



  assign uminus_23 = {masksignbitout_11[31], masksignbitout_11};
  assign uminus_in0_11 =  - (uminus_23);
  assign uminusout_11 = uminus_in0_11[31:0];



  assign nanSwitch_11 = (isNaN_11 == 1'b0 ? uminusout_11 :
              masksignbitout_11);



  assign convout_11 = (switch_compare_1_11 == 1'b0 ? nanSwitch_11 :
              fixout_11);



  assign relopout_1_23 = convout_11 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_23 = convout_11 >= 32'sb01000000101000000000000000000000;



  nfp_sub_single u_nfp_sub_comp_3 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Demands_1),  // single
                                   .nfp_in2(AoA),  // single
                                   .nfp_out(Sum2_out1)  // single
                                   );

  assign relopout_2_17 = convout_8 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign P_Alpha_treesum_stage1_sum1_1 = {1'b0, relopout_1_17};
  assign P_Alpha_treesum_stage1_sum1_2 = {1'b0, relopout_2_17};
  assign P_Alpha_treesum_stage1_1 = P_Alpha_treesum_stage1_sum1_1 + P_Alpha_treesum_stage1_sum1_2;



  assign relopout_4_17 = convout_8 >= 32'sb01000001001000000000000000000000;



  assign P_Alpha_treesum_stage1_sum2_1 = {1'b0, relopout_3_17};
  assign P_Alpha_treesum_stage1_sum2_2 = {1'b0, relopout_4_17};
  assign P_Alpha_treesum_stage1_2 = P_Alpha_treesum_stage1_sum2_1 + P_Alpha_treesum_stage1_sum2_2;



  assign P_Alpha_treesum_stage2_sum1_1 = {1'b0, P_Alpha_treesum_stage1_1};
  assign P_Alpha_treesum_stage2_sum1_2 = {1'b0, P_Alpha_treesum_stage1_2};
  assign P_Alpha_treesum_stage2_1 = P_Alpha_treesum_stage2_sum1_1 + P_Alpha_treesum_stage2_sum1_2;



  assign relopout_6_9 = convout_8 >= 32'sb01000001101000000000000000000000;



  assign P_Alpha_treesum_stage1_sum3_1 = {1'b0, relopout_5_9};
  assign P_Alpha_treesum_stage1_sum3_2 = {1'b0, relopout_6_9};
  assign P_Alpha_treesum_stage1_3 = P_Alpha_treesum_stage1_sum3_1 + P_Alpha_treesum_stage1_sum3_2;



  assign relopout_7_9 = convout_8 >= 32'sb01000001110010000000000000000000;



  assign P_Alpha_treesum_stage1_4 = {1'b0, relopout_7_9};



  assign P_Alpha_treesum_stage2_sum2_1 = {1'b0, P_Alpha_treesum_stage1_3};
  assign P_Alpha_treesum_stage2_sum2_2 = {1'b0, P_Alpha_treesum_stage1_4};
  assign P_Alpha_treesum_stage2_2 = P_Alpha_treesum_stage2_sum2_1 + P_Alpha_treesum_stage2_sum2_2;



  assign P_Alpha_treesum_stage3_1 = {1'b0, P_Alpha_treesum_stage2_1};
  assign P_Alpha_treesum_stage3_2 = {1'b0, P_Alpha_treesum_stage2_2};
  assign P_Alpha_treesum_stage3_3 = P_Alpha_treesum_stage3_1 + P_Alpha_treesum_stage3_2;



  assign matsumout_8 = P_Alpha_treesum_stage3_3[2:0];



  assign relopout_2_19 = convout_9 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign P_Alpha_treesum_stage1_sum1_4 = {1'b0, relopout_1_19};
  assign P_Alpha_treesum_stage1_sum1_5 = {1'b0, relopout_2_19};
  assign P_Alpha_treesum_stage1_1_1 = P_Alpha_treesum_stage1_sum1_4 + P_Alpha_treesum_stage1_sum1_5;



  assign relopout_4_19 = convout_9 >= 32'sb01000001001000000000000000000000;



  assign P_Alpha_treesum_stage1_sum2_4 = {1'b0, relopout_3_19};
  assign P_Alpha_treesum_stage1_sum2_5 = {1'b0, relopout_4_19};
  assign P_Alpha_treesum_stage1_2_1 = P_Alpha_treesum_stage1_sum2_4 + P_Alpha_treesum_stage1_sum2_5;



  assign P_Alpha_treesum_stage2_3 = {1'b0, P_Alpha_treesum_stage1_1_1};
  assign P_Alpha_treesum_stage2_4 = {1'b0, P_Alpha_treesum_stage1_2_1};
  assign P_Alpha_treesum_stage2_5 = P_Alpha_treesum_stage2_3 + P_Alpha_treesum_stage2_4;



  assign matsumout_9 = P_Alpha_treesum_stage2_5;



  assign P_Alpha_1[0] = 32'h3d4ccccd;
  assign P_Alpha_1[1] = 32'h3d4ccccd;
  assign P_Alpha_1[2] = 32'h3d4ccccd;
  assign P_Alpha_1[3] = 32'h3d4ccccd;
  assign P_Alpha_1[4] = 32'h3d4ccccd;
  assign P_Alpha_1[5] = 32'h3d4ccccd;
  assign P_Alpha_1[6] = 32'h3d4ccccd;
  assign P_Alpha_1[7] = 32'h3d4ccccd;
  assign P_Alpha_1[8] = 32'h3d4ccccd;
  assign P_Alpha_1[9] = 32'h3d4ccccd;
  assign P_Alpha_1[10] = 32'h3d4ccccd;
  assign P_Alpha_1[11] = 32'h3d4ccccd;
  assign P_Alpha_1[12] = 32'h3d4ccccd;
  assign P_Alpha_1[13] = 32'h3d4ccccd;
  assign P_Alpha_1[14] = 32'h3d4ccccd;
  assign P_Alpha_1[15] = 32'h3d4ccccd;
  assign P_Alpha_1[16] = 32'h3d4ccccd;
  assign P_Alpha_1[17] = 32'h3d4ccccd;
  assign P_Alpha_1[18] = 32'h3d4ccccd;
  assign P_Alpha_1[19] = 32'h3d4ccccd;
  assign P_Alpha_1[20] = 32'h3d4ccccd;
  assign P_Alpha_1[21] = 32'h3d4ccccd;
  assign P_Alpha_1[22] = 32'h3d4ccccd;
  assign P_Alpha_1[23] = 32'h3d4ccccd;
  assign P_Alpha_1[24] = 32'h3d4ccccd;
  assign P_Alpha_1[25] = 32'h3d4ccccd;
  assign P_Alpha_1[26] = 32'h3d4ccccd;
  assign P_Alpha_1[27] = 32'h3d4ccccd;
  assign P_Alpha_1[28] = 32'h3d4ccccd;
  assign P_Alpha_1[29] = 32'h3d4ccccd;
  assign P_Alpha_1[30] = 32'h3d4ccccd;
  assign P_Alpha_1[31] = 32'h3d4ccccd;
  assign P_Alpha_1[32] = 32'h3d4ccccd;
  assign P_Alpha_1[33] = 32'h3d4ccccd;
  assign P_Alpha_1[34] = 32'h3d4ccccd;
  assign P_Alpha_1[35] = 32'h3d4ccccd;
  assign P_Alpha_1[36] = 32'h3d4ccccd;
  assign P_Alpha_1[37] = 32'h3d4ccccd;
  assign P_Alpha_1[38] = 32'h3d4ccccd;
  assign P_Alpha_1[39] = 32'h3d4ccccd;
  assign P_Alpha_add_cast = {1'b0, matsumout_9};
  assign P_Alpha_add_cast_1 = {{29{P_Alpha_add_cast[3]}}, {P_Alpha_add_cast, 3'b000}};
  assign P_Alpha_out1 = P_Alpha_1[$signed({1'b0, matsumout_8}) + P_Alpha_add_cast_1];



  assign relopout_2_21 = convout_10 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign K_Alpha_treesum_stage1_sum1_1 = {1'b0, relopout_1_21};
  assign K_Alpha_treesum_stage1_sum1_2 = {1'b0, relopout_2_21};
  assign K_Alpha_treesum_stage1_1 = K_Alpha_treesum_stage1_sum1_1 + K_Alpha_treesum_stage1_sum1_2;



  assign relopout_4_21 = convout_10 >= 32'sb01000001001000000000000000000000;



  assign K_Alpha_treesum_stage1_sum2_1 = {1'b0, relopout_3_21};
  assign K_Alpha_treesum_stage1_sum2_2 = {1'b0, relopout_4_21};
  assign K_Alpha_treesum_stage1_2 = K_Alpha_treesum_stage1_sum2_1 + K_Alpha_treesum_stage1_sum2_2;



  assign K_Alpha_treesum_stage2_sum1_1 = {1'b0, K_Alpha_treesum_stage1_1};
  assign K_Alpha_treesum_stage2_sum1_2 = {1'b0, K_Alpha_treesum_stage1_2};
  assign K_Alpha_treesum_stage2_1 = K_Alpha_treesum_stage2_sum1_1 + K_Alpha_treesum_stage2_sum1_2;



  assign relopout_6_11 = convout_10 >= 32'sb01000001101000000000000000000000;



  assign K_Alpha_treesum_stage1_sum3_1 = {1'b0, relopout_5_11};
  assign K_Alpha_treesum_stage1_sum3_2 = {1'b0, relopout_6_11};
  assign K_Alpha_treesum_stage1_3 = K_Alpha_treesum_stage1_sum3_1 + K_Alpha_treesum_stage1_sum3_2;



  assign relopout_7_11 = convout_10 >= 32'sb01000001110010000000000000000000;



  assign K_Alpha_treesum_stage1_4 = {1'b0, relopout_7_11};



  assign K_Alpha_treesum_stage2_sum2_1 = {1'b0, K_Alpha_treesum_stage1_3};
  assign K_Alpha_treesum_stage2_sum2_2 = {1'b0, K_Alpha_treesum_stage1_4};
  assign K_Alpha_treesum_stage2_2 = K_Alpha_treesum_stage2_sum2_1 + K_Alpha_treesum_stage2_sum2_2;



  assign K_Alpha_treesum_stage3_1 = {1'b0, K_Alpha_treesum_stage2_1};
  assign K_Alpha_treesum_stage3_2 = {1'b0, K_Alpha_treesum_stage2_2};
  assign K_Alpha_treesum_stage3_3 = K_Alpha_treesum_stage3_1 + K_Alpha_treesum_stage3_2;



  assign matsumout_10 = K_Alpha_treesum_stage3_3[2:0];



  assign relopout_2_23 = convout_11 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign K_Alpha_treesum_stage1_sum1_4 = {1'b0, relopout_1_23};
  assign K_Alpha_treesum_stage1_sum1_5 = {1'b0, relopout_2_23};
  assign K_Alpha_treesum_stage1_1_1 = K_Alpha_treesum_stage1_sum1_4 + K_Alpha_treesum_stage1_sum1_5;



  assign relopout_4_23 = convout_11 >= 32'sb01000001001000000000000000000000;



  assign K_Alpha_treesum_stage1_sum2_4 = {1'b0, relopout_3_23};
  assign K_Alpha_treesum_stage1_sum2_5 = {1'b0, relopout_4_23};
  assign K_Alpha_treesum_stage1_2_1 = K_Alpha_treesum_stage1_sum2_4 + K_Alpha_treesum_stage1_sum2_5;



  assign K_Alpha_treesum_stage2_3 = {1'b0, K_Alpha_treesum_stage1_1_1};
  assign K_Alpha_treesum_stage2_4 = {1'b0, K_Alpha_treesum_stage1_2_1};
  assign K_Alpha_treesum_stage2_5 = K_Alpha_treesum_stage2_3 + K_Alpha_treesum_stage2_4;



  assign matsumout_11 = K_Alpha_treesum_stage2_5;



  assign K_Alpha_1[0] = 32'h3d2d6f46;
  assign K_Alpha_1[1] = 32'h3d68e51e;
  assign K_Alpha_1[2] = 32'h3dd108bb;
  assign K_Alpha_1[3] = 32'h3d9dd01c;
  assign K_Alpha_1[4] = 32'h3dae46a8;
  assign K_Alpha_1[5] = 32'h3d87c27a;
  assign K_Alpha_1[6] = 32'h3d5354cc;
  assign K_Alpha_1[7] = 32'h3d6862f0;
  assign K_Alpha_1[8] = 32'h3d79ced1;
  assign K_Alpha_1[9] = 32'h3d82ef87;
  assign K_Alpha_1[10] = 32'h3dd2dac1;
  assign K_Alpha_1[11] = 32'h3d96ac83;
  assign K_Alpha_1[12] = 32'h3d93d470;
  assign K_Alpha_1[13] = 32'h3d8fdfcd;
  assign K_Alpha_1[14] = 32'h3d86f496;
  assign K_Alpha_1[15] = 32'h3d7fea87;
  assign K_Alpha_1[16] = 32'h3d8a5901;
  assign K_Alpha_1[17] = 32'h3d8968a9;
  assign K_Alpha_1[18] = 32'h3dd79bd9;
  assign K_Alpha_1[19] = 32'h3d909388;
  assign K_Alpha_1[20] = 32'h3d8dcd44;
  assign K_Alpha_1[21] = 32'h3d8bc6ff;
  assign K_Alpha_1[22] = 32'h3d89c6f2;
  assign K_Alpha_1[23] = 32'h3d88d3cd;
  assign K_Alpha_1[24] = 32'h3d80dec2;
  assign K_Alpha_1[25] = 32'h3d82ab8f;
  assign K_Alpha_1[26] = 32'h3de225c3;
  assign K_Alpha_1[27] = 32'h3d913847;
  assign K_Alpha_1[28] = 32'h3d9507f3;
  assign K_Alpha_1[29] = 32'h3d8e2126;
  assign K_Alpha_1[30] = 32'h3d8c1eb4;
  assign K_Alpha_1[31] = 32'h3d790fa5;
  assign K_Alpha_1[32] = 32'h3d4cd77f;
  assign K_Alpha_1[33] = 32'h3d45307b;
  assign K_Alpha_1[34] = 32'h3dce1ffd;
  assign K_Alpha_1[35] = 32'h3da29221;
  assign K_Alpha_1[36] = 32'h3da7b087;
  assign K_Alpha_1[37] = 32'h3d9d5cd2;
  assign K_Alpha_1[38] = 32'h3d5ffc78;
  assign K_Alpha_1[39] = 32'h3d2edbfb;
  assign K_Alpha_add_cast = {1'b0, matsumout_11};
  assign K_Alpha_add_cast_1 = {{29{K_Alpha_add_cast[3]}}, {K_Alpha_add_cast, 3'b000}};
  assign K_Alpha_out1 = K_Alpha_1[$signed({1'b0, matsumout_10}) + K_Alpha_add_cast_1];



  Discrete_PID_Controller1 u_Discrete_PID_Controller1 (.clk(clk),
                                                       .reset(reset),
                                                       .enb_1_20000000_1(enb_1_20000000_1),
                                                       .enb(enb),
                                                       .u(Sum2_out1),  // single
                                                       .P(P_Alpha_out1),  // single
                                                       .I(K_Alpha_out1),  // single
                                                       .y(Discrete_PID_Controller1_out1)  // single
                                                       );

  always @(posedge clk or posedge reset)
    begin : rd_9_process
      if (reset == 1'b1) begin
        Discrete_PID_Controller1_out1_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Discrete_PID_Controller1_out1_1 <= Discrete_PID_Controller1_out1;
        end
      end
    end



  assign pw2_sign_const = 1'b0;



  assign pw2_shift_const = 9'sb111111111;



  assign s_state_out1_6 = s_state_out1_5;

  always @(posedge clk or posedge reset)
    begin : rd_10_process
      if (reset == 1'b1) begin
        s_state_out1_7 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          s_state_out1_7 <= s_state_out1_6;
        end
      end
    end



  nfp_gain_pow2_single u_nfp_gain_pow2_single (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .nfp_in1(s_state_out1_7),  // single
                                               .nfp_in2(pw2_sign_const),  // ufix1
                                               .nfp_in3(pw2_shift_const),  // sfix9
                                               .nfp_out(s_denom_gain1_2)  // single
                                               );

  always @(posedge clk or posedge reset)
    begin : rd_11_process
      if (reset == 1'b1) begin
        for(rd_11_t_1 = 32'sd0; rd_11_t_1 <= 32'sd28; rd_11_t_1 = rd_11_t_1 + 32'sd1) begin
          rd_11_reg[rd_11_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_11_t_0_1 = 32'sd0; rd_11_t_0_1 <= 32'sd28; rd_11_t_0_1 = rd_11_t_0_1 + 32'sd1) begin
            rd_11_reg[rd_11_t_0_1] <= rd_11_reg_next[rd_11_t_0_1];
          end
        end
      end
    end

  always @* begin
    s_denom_gain1_3 = rd_11_reg[28];
    rd_11_reg_next[0] = s_denom_gain1_2;

    for(rd_11_t_0_0 = 32'sd0; rd_11_t_0_0 <= 32'sd27; rd_11_t_0_0 = rd_11_t_0_0 + 32'sd1) begin
      rd_11_reg_next[rd_11_t_0_0 + 32'sd1] = rd_11_reg[rd_11_t_0_0];
    end

  end



  nfp_sub_single u_nfp_sub_comp_4 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Discrete_PID_Controller1_out1_1),  // single
                                   .nfp_in2(s_denom_gain1_3),  // single
                                   .nfp_out(s_denom_acc_out1_1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : s_state_out12_bypass_process
      if (reset == 1'b1) begin
        s_state_out12_bypass_reg <= 32'h00000000;
      end
      else begin
        if (enb_1_20000000_1) begin
          s_state_out12_bypass_reg <= s_denom_acc_out1_1;
        end
      end
    end

  assign s_state_out1_5 = (enb_1_20000000_1 == 1'b1 ? s_denom_acc_out1_1 :
              s_state_out12_bypass_reg);



  assign s_state_out1_8 = s_state_out1_5;

  always @(posedge clk or posedge reset)
    begin : rd_12_process
      if (reset == 1'b1) begin
        s_state_out1_9 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          s_state_out1_9 <= s_state_out1_8;
        end
      end
    end



  nfp_sub_single u_nfp_sub_comp_5 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Rates_3[1]),  // single
                                   .nfp_in2(s_state_out1_9),  // single
                                   .nfp_out(Sum5_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : rd_14_process
      if (reset == 1'b1) begin
        for(rd_14_t_1 = 32'sd0; rd_14_t_1 <= 32'sd1; rd_14_t_1 = rd_14_t_1 + 32'sd1) begin
          rd_14_reg[rd_14_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_14_t_0_0 = 32'sd0; rd_14_t_0_0 <= 32'sd1; rd_14_t_0_0 = rd_14_t_0_0 + 32'sd1) begin
            rd_14_reg[rd_14_t_0_0] <= rd_14_reg_next[rd_14_t_0_0];
          end
        end
      end
    end

  assign Sum5_out1_1 = rd_14_reg[1];
  assign rd_14_reg_next[0] = Sum5_out1;
  assign rd_14_reg_next[1] = rd_14_reg[0];



  nfp_mul_single u_nfp_mul_comp_2 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Kq_out1_1),  // single
                                   .nfp_in2(Sum5_out1_1),  // single
                                   .nfp_out(Product1_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : rd_15_process
      if (reset == 1'b1) begin
        Product1_out1_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Product1_out1_1 <= Product1_out1;
        end
      end
    end



  assign Out2 = Product1_out1_1;

  nfp_wire_single u_nfp_wire_single_12 (.nfp_in(Alpha_1),  // single
                                        .nfp_out(ufixout_12)  // uint32
                                        );

  assign fixout_12 = ufixout_12;



  assign switch_compare_1_12 = fixout_12 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_12 = fixout_12[30:0];



  assign masksignbitout_12 = {1'b0, bitsliceout_12};



  assign isNaN_12 = masksignbitout_12 == 32'sb01111111110000000000000000000000;



  assign uminus_25 = {masksignbitout_12[31], masksignbitout_12};
  assign uminus_in0_12 =  - (uminus_25);
  assign uminusout_12 = uminus_in0_12[31:0];



  assign nanSwitch_12 = (isNaN_12 == 1'b0 ? uminusout_12 :
              masksignbitout_12);



  assign convout_12 = (switch_compare_1_12 == 1'b0 ? nanSwitch_12 :
              fixout_12);



  assign relopout_1_25 = convout_12 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_25 = convout_12 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_13 = convout_12 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_13 (.nfp_in(Beta_1),  // single
                                        .nfp_out(ufixout_13)  // uint32
                                        );

  assign fixout_13 = ufixout_13;



  assign switch_compare_1_13 = fixout_13 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_13 = fixout_13[30:0];



  assign masksignbitout_13 = {1'b0, bitsliceout_13};



  assign isNaN_13 = masksignbitout_13 == 32'sb01111111110000000000000000000000;



  assign uminus_27 = {masksignbitout_13[31], masksignbitout_13};
  assign uminus_in0_13 =  - (uminus_27);
  assign uminusout_13 = uminus_in0_13[31:0];



  assign nanSwitch_13 = (isNaN_13 == 1'b0 ? uminusout_13 :
              masksignbitout_13);



  assign convout_13 = (switch_compare_1_13 == 1'b0 ? nanSwitch_13 :
              fixout_13);



  assign relopout_1_27 = convout_13 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_27 = convout_13 >= 32'sb01000000101000000000000000000000;



  assign relopout_2_25 = convout_12 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign Kr_treesum_stage1_sum1_1 = {1'b0, relopout_1_25};
  assign Kr_treesum_stage1_sum1_2 = {1'b0, relopout_2_25};
  assign Kr_treesum_stage1_1 = Kr_treesum_stage1_sum1_1 + Kr_treesum_stage1_sum1_2;



  assign relopout_4_25 = convout_12 >= 32'sb01000001001000000000000000000000;



  assign Kr_treesum_stage1_sum2_1 = {1'b0, relopout_3_25};
  assign Kr_treesum_stage1_sum2_2 = {1'b0, relopout_4_25};
  assign Kr_treesum_stage1_2 = Kr_treesum_stage1_sum2_1 + Kr_treesum_stage1_sum2_2;



  assign Kr_treesum_stage2_sum1_1 = {1'b0, Kr_treesum_stage1_1};
  assign Kr_treesum_stage2_sum1_2 = {1'b0, Kr_treesum_stage1_2};
  assign Kr_treesum_stage2_1 = Kr_treesum_stage2_sum1_1 + Kr_treesum_stage2_sum1_2;



  assign relopout_6_13 = convout_12 >= 32'sb01000001101000000000000000000000;



  assign Kr_treesum_stage1_sum3_1 = {1'b0, relopout_5_13};
  assign Kr_treesum_stage1_sum3_2 = {1'b0, relopout_6_13};
  assign Kr_treesum_stage1_3 = Kr_treesum_stage1_sum3_1 + Kr_treesum_stage1_sum3_2;



  assign relopout_7_13 = convout_12 >= 32'sb01000001110010000000000000000000;



  assign Kr_treesum_stage1_4 = {1'b0, relopout_7_13};



  assign Kr_treesum_stage2_sum2_1 = {1'b0, Kr_treesum_stage1_3};
  assign Kr_treesum_stage2_sum2_2 = {1'b0, Kr_treesum_stage1_4};
  assign Kr_treesum_stage2_2 = Kr_treesum_stage2_sum2_1 + Kr_treesum_stage2_sum2_2;



  assign Kr_treesum_stage3_1 = {1'b0, Kr_treesum_stage2_1};
  assign Kr_treesum_stage3_2 = {1'b0, Kr_treesum_stage2_2};
  assign Kr_treesum_stage3_3 = Kr_treesum_stage3_1 + Kr_treesum_stage3_2;



  assign matsumout_12 = Kr_treesum_stage3_3[2:0];



  assign relopout_2_27 = convout_13 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign Kr_treesum_stage1_sum1_4 = {1'b0, relopout_1_27};
  assign Kr_treesum_stage1_sum1_5 = {1'b0, relopout_2_27};
  assign Kr_treesum_stage1_1_1 = Kr_treesum_stage1_sum1_4 + Kr_treesum_stage1_sum1_5;



  assign relopout_4_27 = convout_13 >= 32'sb01000001001000000000000000000000;



  assign Kr_treesum_stage1_sum2_4 = {1'b0, relopout_3_27};
  assign Kr_treesum_stage1_sum2_5 = {1'b0, relopout_4_27};
  assign Kr_treesum_stage1_2_1 = Kr_treesum_stage1_sum2_4 + Kr_treesum_stage1_sum2_5;



  assign Kr_treesum_stage2_3 = {1'b0, Kr_treesum_stage1_1_1};
  assign Kr_treesum_stage2_4 = {1'b0, Kr_treesum_stage1_2_1};
  assign Kr_treesum_stage2_5 = Kr_treesum_stage2_3 + Kr_treesum_stage2_4;



  assign matsumout_13 = Kr_treesum_stage2_5;



  assign Kr_1[0] = 32'hc432792f;
  assign Kr_1[1] = 32'hc47a87e6;
  assign Kr_1[2] = 32'hc49037bc;
  assign Kr_1[3] = 32'hc4903758;
  assign Kr_1[4] = 32'hc486baca;
  assign Kr_1[5] = 32'hc47be181;
  assign Kr_1[6] = 32'hc47e4eb4;
  assign Kr_1[7] = 32'hc4846634;
  assign Kr_1[8] = 32'hc4337620;
  assign Kr_1[9] = 32'hc47aad79;
  assign Kr_1[10] = 32'hc4906a6b;
  assign Kr_1[11] = 32'hc490049d;
  assign Kr_1[12] = 32'hc48617ef;
  assign Kr_1[13] = 32'hc47c2bed;
  assign Kr_1[14] = 32'hc47ca391;
  assign Kr_1[15] = 32'hc483f252;
  assign Kr_1[16] = 32'hc4329778;
  assign Kr_1[17] = 32'hc47aae57;
  assign Kr_1[18] = 32'hc48fef4e;
  assign Kr_1[19] = 32'hc4901f03;
  assign Kr_1[20] = 32'hc485d322;
  assign Kr_1[21] = 32'hc47c4526;
  assign Kr_1[22] = 32'hc47a1f57;
  assign Kr_1[23] = 32'hc4845ddd;
  assign Kr_1[24] = 32'hc4335f51;
  assign Kr_1[25] = 32'hc47aad41;
  assign Kr_1[26] = 32'hc490462f;
  assign Kr_1[27] = 32'hc48ffce9;
  assign Kr_1[28] = 32'hc4867dd5;
  assign Kr_1[29] = 32'hc47c2f3a;
  assign Kr_1[30] = 32'hc47d2518;
  assign Kr_1[31] = 32'hc48400e1;
  assign Kr_1[32] = 32'hc432dd38;
  assign Kr_1[33] = 32'hc47ba3e3;
  assign Kr_1[34] = 32'hc49016bb;
  assign Kr_1[35] = 32'hc490119b;
  assign Kr_1[36] = 32'hc486c705;
  assign Kr_1[37] = 32'hc47bacb0;
  assign Kr_1[38] = 32'hc47ea03a;
  assign Kr_1[39] = 32'hc483e6f9;
  assign Kr_add_cast = {1'b0, matsumout_13};
  assign Kr_add_cast_1 = {{29{Kr_add_cast[3]}}, {Kr_add_cast, 3'b000}};
  assign Kr_out1 = Kr_1[$signed({1'b0, matsumout_12}) + Kr_add_cast_1];



  always @(posedge clk or posedge reset)
    begin : rd_20_process
      if (reset == 1'b1) begin
        for(rd_20_t_1 = 32'sd0; rd_20_t_1 <= 32'sd13; rd_20_t_1 = rd_20_t_1 + 32'sd1) begin
          rd_20_reg[rd_20_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_20_t_0_1 = 32'sd0; rd_20_t_0_1 <= 32'sd13; rd_20_t_0_1 = rd_20_t_0_1 + 32'sd1) begin
            rd_20_reg[rd_20_t_0_1] <= rd_20_reg_next[rd_20_t_0_1];
          end
        end
      end
    end

  always @* begin
    Kr_out1_1 = rd_20_reg[13];
    rd_20_reg_next[0] = Kr_out1;

    for(rd_20_t_0_0 = 32'sd0; rd_20_t_0_0 <= 32'sd12; rd_20_t_0_0 = rd_20_t_0_0 + 32'sd1) begin
      rd_20_reg_next[rd_20_t_0_0 + 32'sd1] = rd_20_reg[rd_20_t_0_0];
    end

  end



  nfp_wire_single u_nfp_wire_single_14 (.nfp_in(Alpha_2),  // single
                                        .nfp_out(ufixout_14)  // uint32
                                        );

  assign fixout_14 = ufixout_14;



  assign switch_compare_1_14 = fixout_14 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_14 = fixout_14[30:0];



  assign masksignbitout_14 = {1'b0, bitsliceout_14};



  assign isNaN_14 = masksignbitout_14 == 32'sb01111111110000000000000000000000;



  assign uminus_29 = {masksignbitout_14[31], masksignbitout_14};
  assign uminus_in0_14 =  - (uminus_29);
  assign uminusout_14 = uminus_in0_14[31:0];



  assign nanSwitch_14 = (isNaN_14 == 1'b0 ? uminusout_14 :
              masksignbitout_14);



  assign convout_14 = (switch_compare_1_14 == 1'b0 ? nanSwitch_14 :
              fixout_14);



  assign relopout_1_29 = convout_14 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_29 = convout_14 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_15 = convout_14 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_15 (.nfp_in(Beta_2),  // single
                                        .nfp_out(ufixout_15)  // uint32
                                        );

  assign fixout_15 = ufixout_15;



  assign switch_compare_1_15 = fixout_15 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_15 = fixout_15[30:0];



  assign masksignbitout_15 = {1'b0, bitsliceout_15};



  assign isNaN_15 = masksignbitout_15 == 32'sb01111111110000000000000000000000;



  assign uminus_31 = {masksignbitout_15[31], masksignbitout_15};
  assign uminus_in0_15 =  - (uminus_31);
  assign uminusout_15 = uminus_in0_15[31:0];



  assign nanSwitch_15 = (isNaN_15 == 1'b0 ? uminusout_15 :
              masksignbitout_15);



  assign convout_15 = (switch_compare_1_15 == 1'b0 ? nanSwitch_15 :
              fixout_15);



  assign relopout_1_31 = convout_15 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_31 = convout_15 >= 32'sb01000000101000000000000000000000;



  nfp_wire_single u_nfp_wire_single_16 (.nfp_in(Alpha_2),  // single
                                        .nfp_out(ufixout_16)  // uint32
                                        );

  assign fixout_16 = ufixout_16;



  assign switch_compare_1_16 = fixout_16 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_16 = fixout_16[30:0];



  assign masksignbitout_16 = {1'b0, bitsliceout_16};



  assign isNaN_16 = masksignbitout_16 == 32'sb01111111110000000000000000000000;



  assign uminus_33 = {masksignbitout_16[31], masksignbitout_16};
  assign uminus_in0_16 =  - (uminus_33);
  assign uminusout_16 = uminus_in0_16[31:0];



  assign nanSwitch_16 = (isNaN_16 == 1'b0 ? uminusout_16 :
              masksignbitout_16);



  assign convout_16 = (switch_compare_1_16 == 1'b0 ? nanSwitch_16 :
              fixout_16);



  assign relopout_1_33 = convout_16 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_33 = convout_16 >= 32'sb01000000101000000000000000000000;



  assign relopout_5_17 = convout_16 >= 32'sb01000001011100000000000000000000;



  nfp_wire_single u_nfp_wire_single_17 (.nfp_in(Beta_2),  // single
                                        .nfp_out(ufixout_17)  // uint32
                                        );

  assign fixout_17 = ufixout_17;



  assign switch_compare_1_17 = fixout_17 > 32'sb00000000000000000000000000000000;



  assign bitsliceout_17 = fixout_17[30:0];



  assign masksignbitout_17 = {1'b0, bitsliceout_17};



  assign isNaN_17 = masksignbitout_17 == 32'sb01111111110000000000000000000000;



  assign uminus_35 = {masksignbitout_17[31], masksignbitout_17};
  assign uminus_in0_17 =  - (uminus_35);
  assign uminusout_17 = uminus_in0_17[31:0];



  assign nanSwitch_17 = (isNaN_17 == 1'b0 ? uminusout_17 :
              masksignbitout_17);



  assign convout_17 = (switch_compare_1_17 == 1'b0 ? nanSwitch_17 :
              fixout_17);



  assign relopout_1_35 = convout_17 >= 32'sb10111111011000000000000000000000;



  assign relopout_3_35 = convout_17 >= 32'sb01000000101000000000000000000000;



  nfp_sub_single u_nfp_sub_comp_6 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Demands_0),  // single
                                   .nfp_in2(Phi),  // single
                                   .nfp_out(Sum1_out1)  // single
                                   );

  assign relopout_2_29 = convout_14 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign P_Beta_treesum_stage1_sum1_1 = {1'b0, relopout_1_29};
  assign P_Beta_treesum_stage1_sum1_2 = {1'b0, relopout_2_29};
  assign P_Beta_treesum_stage1_1 = P_Beta_treesum_stage1_sum1_1 + P_Beta_treesum_stage1_sum1_2;



  assign relopout_4_29 = convout_14 >= 32'sb01000001001000000000000000000000;



  assign P_Beta_treesum_stage1_sum2_1 = {1'b0, relopout_3_29};
  assign P_Beta_treesum_stage1_sum2_2 = {1'b0, relopout_4_29};
  assign P_Beta_treesum_stage1_2 = P_Beta_treesum_stage1_sum2_1 + P_Beta_treesum_stage1_sum2_2;



  assign P_Beta_treesum_stage2_sum1_1 = {1'b0, P_Beta_treesum_stage1_1};
  assign P_Beta_treesum_stage2_sum1_2 = {1'b0, P_Beta_treesum_stage1_2};
  assign P_Beta_treesum_stage2_1 = P_Beta_treesum_stage2_sum1_1 + P_Beta_treesum_stage2_sum1_2;



  assign relopout_6_15 = convout_14 >= 32'sb01000001101000000000000000000000;



  assign P_Beta_treesum_stage1_sum3_1 = {1'b0, relopout_5_15};
  assign P_Beta_treesum_stage1_sum3_2 = {1'b0, relopout_6_15};
  assign P_Beta_treesum_stage1_3 = P_Beta_treesum_stage1_sum3_1 + P_Beta_treesum_stage1_sum3_2;



  assign relopout_7_15 = convout_14 >= 32'sb01000001110010000000000000000000;



  assign P_Beta_treesum_stage1_4 = {1'b0, relopout_7_15};



  assign P_Beta_treesum_stage2_sum2_1 = {1'b0, P_Beta_treesum_stage1_3};
  assign P_Beta_treesum_stage2_sum2_2 = {1'b0, P_Beta_treesum_stage1_4};
  assign P_Beta_treesum_stage2_2 = P_Beta_treesum_stage2_sum2_1 + P_Beta_treesum_stage2_sum2_2;



  assign P_Beta_treesum_stage3_1 = {1'b0, P_Beta_treesum_stage2_1};
  assign P_Beta_treesum_stage3_2 = {1'b0, P_Beta_treesum_stage2_2};
  assign P_Beta_treesum_stage3_3 = P_Beta_treesum_stage3_1 + P_Beta_treesum_stage3_2;



  assign matsumout_14 = P_Beta_treesum_stage3_3[2:0];



  assign relopout_2_31 = convout_15 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign P_Beta_treesum_stage1_sum1_4 = {1'b0, relopout_1_31};
  assign P_Beta_treesum_stage1_sum1_5 = {1'b0, relopout_2_31};
  assign P_Beta_treesum_stage1_1_1 = P_Beta_treesum_stage1_sum1_4 + P_Beta_treesum_stage1_sum1_5;



  assign relopout_4_31 = convout_15 >= 32'sb01000001001000000000000000000000;



  assign P_Beta_treesum_stage1_sum2_4 = {1'b0, relopout_3_31};
  assign P_Beta_treesum_stage1_sum2_5 = {1'b0, relopout_4_31};
  assign P_Beta_treesum_stage1_2_1 = P_Beta_treesum_stage1_sum2_4 + P_Beta_treesum_stage1_sum2_5;



  assign P_Beta_treesum_stage2_3 = {1'b0, P_Beta_treesum_stage1_1_1};
  assign P_Beta_treesum_stage2_4 = {1'b0, P_Beta_treesum_stage1_2_1};
  assign P_Beta_treesum_stage2_5 = P_Beta_treesum_stage2_3 + P_Beta_treesum_stage2_4;



  assign matsumout_15 = P_Beta_treesum_stage2_5;



  assign P_Beta_1[0] = 32'hbd4ccccd;
  assign P_Beta_1[1] = 32'hbd4ccccd;
  assign P_Beta_1[2] = 32'hbd4ccccd;
  assign P_Beta_1[3] = 32'hbd4ccccd;
  assign P_Beta_1[4] = 32'hbd4ccccd;
  assign P_Beta_1[5] = 32'hbd4ccccd;
  assign P_Beta_1[6] = 32'hbd4ccccd;
  assign P_Beta_1[7] = 32'hbd4ccccd;
  assign P_Beta_1[8] = 32'hbd4ccccd;
  assign P_Beta_1[9] = 32'hbd4ccccd;
  assign P_Beta_1[10] = 32'hbd4ccccd;
  assign P_Beta_1[11] = 32'hbd4ccccd;
  assign P_Beta_1[12] = 32'hbd4ccccd;
  assign P_Beta_1[13] = 32'hbd4ccccd;
  assign P_Beta_1[14] = 32'hbd4ccccd;
  assign P_Beta_1[15] = 32'hbd4ccccd;
  assign P_Beta_1[16] = 32'hbd4ccccd;
  assign P_Beta_1[17] = 32'hbd4ccccd;
  assign P_Beta_1[18] = 32'hbd4ccccd;
  assign P_Beta_1[19] = 32'hbd4ccccd;
  assign P_Beta_1[20] = 32'hbd4ccccd;
  assign P_Beta_1[21] = 32'hbd4ccccd;
  assign P_Beta_1[22] = 32'hbd4ccccd;
  assign P_Beta_1[23] = 32'hbd4ccccd;
  assign P_Beta_1[24] = 32'hbd4ccccd;
  assign P_Beta_1[25] = 32'hbd4ccccd;
  assign P_Beta_1[26] = 32'hbd4ccccd;
  assign P_Beta_1[27] = 32'hbd4ccccd;
  assign P_Beta_1[28] = 32'hbd4ccccd;
  assign P_Beta_1[29] = 32'hbd4ccccd;
  assign P_Beta_1[30] = 32'hbd4ccccd;
  assign P_Beta_1[31] = 32'hbd4ccccd;
  assign P_Beta_1[32] = 32'hbd4ccccd;
  assign P_Beta_1[33] = 32'hbd4ccccd;
  assign P_Beta_1[34] = 32'hbd4ccccd;
  assign P_Beta_1[35] = 32'hbd4ccccd;
  assign P_Beta_1[36] = 32'hbd4ccccd;
  assign P_Beta_1[37] = 32'hbd4ccccd;
  assign P_Beta_1[38] = 32'hbd4ccccd;
  assign P_Beta_1[39] = 32'hbd4ccccd;
  assign P_Beta_add_cast = {1'b0, matsumout_15};
  assign P_Beta_add_cast_1 = {{29{P_Beta_add_cast[3]}}, {P_Beta_add_cast, 3'b000}};
  assign P_Beta_out1 = P_Beta_1[$signed({1'b0, matsumout_14}) + P_Beta_add_cast_1];



  assign relopout_2_33 = convout_16 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign K_Beta_treesum_stage1_sum1_1 = {1'b0, relopout_1_33};
  assign K_Beta_treesum_stage1_sum1_2 = {1'b0, relopout_2_33};
  assign K_Beta_treesum_stage1_1 = K_Beta_treesum_stage1_sum1_1 + K_Beta_treesum_stage1_sum1_2;



  assign relopout_4_33 = convout_16 >= 32'sb01000001001000000000000000000000;



  assign K_Beta_treesum_stage1_sum2_1 = {1'b0, relopout_3_33};
  assign K_Beta_treesum_stage1_sum2_2 = {1'b0, relopout_4_33};
  assign K_Beta_treesum_stage1_2 = K_Beta_treesum_stage1_sum2_1 + K_Beta_treesum_stage1_sum2_2;



  assign K_Beta_treesum_stage2_sum1_1 = {1'b0, K_Beta_treesum_stage1_1};
  assign K_Beta_treesum_stage2_sum1_2 = {1'b0, K_Beta_treesum_stage1_2};
  assign K_Beta_treesum_stage2_1 = K_Beta_treesum_stage2_sum1_1 + K_Beta_treesum_stage2_sum1_2;



  assign relopout_6_17 = convout_16 >= 32'sb01000001101000000000000000000000;



  assign K_Beta_treesum_stage1_sum3_1 = {1'b0, relopout_5_17};
  assign K_Beta_treesum_stage1_sum3_2 = {1'b0, relopout_6_17};
  assign K_Beta_treesum_stage1_3 = K_Beta_treesum_stage1_sum3_1 + K_Beta_treesum_stage1_sum3_2;



  assign relopout_7_17 = convout_16 >= 32'sb01000001110010000000000000000000;



  assign K_Beta_treesum_stage1_4 = {1'b0, relopout_7_17};



  assign K_Beta_treesum_stage2_sum2_1 = {1'b0, K_Beta_treesum_stage1_3};
  assign K_Beta_treesum_stage2_sum2_2 = {1'b0, K_Beta_treesum_stage1_4};
  assign K_Beta_treesum_stage2_2 = K_Beta_treesum_stage2_sum2_1 + K_Beta_treesum_stage2_sum2_2;



  assign K_Beta_treesum_stage3_1 = {1'b0, K_Beta_treesum_stage2_1};
  assign K_Beta_treesum_stage3_2 = {1'b0, K_Beta_treesum_stage2_2};
  assign K_Beta_treesum_stage3_3 = K_Beta_treesum_stage3_1 + K_Beta_treesum_stage3_2;



  assign matsumout_16 = K_Beta_treesum_stage3_3[2:0];



  assign relopout_2_35 = convout_17 >= 32'sb00000000000000000000000000000000;



  // ---- Tree sum implementation ----
  assign K_Beta_treesum_stage1_sum1_4 = {1'b0, relopout_1_35};
  assign K_Beta_treesum_stage1_sum1_5 = {1'b0, relopout_2_35};
  assign K_Beta_treesum_stage1_1_1 = K_Beta_treesum_stage1_sum1_4 + K_Beta_treesum_stage1_sum1_5;



  assign relopout_4_35 = convout_17 >= 32'sb01000001001000000000000000000000;



  assign K_Beta_treesum_stage1_sum2_4 = {1'b0, relopout_3_35};
  assign K_Beta_treesum_stage1_sum2_5 = {1'b0, relopout_4_35};
  assign K_Beta_treesum_stage1_2_1 = K_Beta_treesum_stage1_sum2_4 + K_Beta_treesum_stage1_sum2_5;



  assign K_Beta_treesum_stage2_3 = {1'b0, K_Beta_treesum_stage1_1_1};
  assign K_Beta_treesum_stage2_4 = {1'b0, K_Beta_treesum_stage1_2_1};
  assign K_Beta_treesum_stage2_5 = K_Beta_treesum_stage2_3 + K_Beta_treesum_stage2_4;



  assign matsumout_17 = K_Beta_treesum_stage2_5;



  assign K_Beta_1[0] = 32'hbd2cd65d;
  assign K_Beta_1[1] = 32'hbd01bfc4;
  assign K_Beta_1[2] = 32'hbcf06e19;
  assign K_Beta_1[3] = 32'hbcd225c1;
  assign K_Beta_1[4] = 32'hbcfb929c;
  assign K_Beta_1[5] = 32'hbd053750;
  assign K_Beta_1[6] = 32'hbd0980a8;
  assign K_Beta_1[7] = 32'hbd036220;
  assign K_Beta_1[8] = 32'hbd0d68bc;
  assign K_Beta_1[9] = 32'hbd0808b2;
  assign K_Beta_1[10] = 32'hbd10ac06;
  assign K_Beta_1[11] = 32'hbd0bf5ed;
  assign K_Beta_1[12] = 32'hbd0f9e87;
  assign K_Beta_1[13] = 32'hbd20a3f6;
  assign K_Beta_1[14] = 32'hbd29150c;
  assign K_Beta_1[15] = 32'hbd21f929;
  assign K_Beta_1[16] = 32'hbd4a33a4;
  assign K_Beta_1[17] = 32'hbd2bf204;
  assign K_Beta_1[18] = 32'hbd1971b2;
  assign K_Beta_1[19] = 32'hbd1c67f2;
  assign K_Beta_1[20] = 32'hbd21d00d;
  assign K_Beta_1[21] = 32'hbd2a9ef7;
  assign K_Beta_1[22] = 32'hbd355c68;
  assign K_Beta_1[23] = 32'hbd462052;
  assign K_Beta_1[24] = 32'hbd1c99bc;
  assign K_Beta_1[25] = 32'hbd09d614;
  assign K_Beta_1[26] = 32'hbcfe38b4;
  assign K_Beta_1[27] = 32'hbd016db8;
  assign K_Beta_1[28] = 32'hbd16f100;
  assign K_Beta_1[29] = 32'hbd1b68bc;
  assign K_Beta_1[30] = 32'hbd31d327;
  assign K_Beta_1[31] = 32'hbd313292;
  assign K_Beta_1[32] = 32'hbd1b2b8f;
  assign K_Beta_1[33] = 32'hbc69bba0;
  assign K_Beta_1[34] = 32'hbd0e7eb0;
  assign K_Beta_1[35] = 32'hbcf49413;
  assign K_Beta_1[36] = 32'hbcec53fd;
  assign K_Beta_1[37] = 32'hbd2c1eff;
  assign K_Beta_1[38] = 32'hbd019704;
  assign K_Beta_1[39] = 32'hbd2195df;
  assign K_Beta_add_cast = {1'b0, matsumout_17};
  assign K_Beta_add_cast_1 = {{29{K_Beta_add_cast[3]}}, {K_Beta_add_cast, 3'b000}};
  assign K_Beta_out1 = K_Beta_1[$signed({1'b0, matsumout_16}) + K_Beta_add_cast_1];



  Discrete_PID_Controller2 u_Discrete_PID_Controller2 (.clk(clk),
                                                       .reset(reset),
                                                       .enb_1_20000000_1(enb_1_20000000_1),
                                                       .enb(enb),
                                                       .u(Sum1_out1),  // single
                                                       .P(P_Beta_out1),  // single
                                                       .I(K_Beta_out1),  // single
                                                       .y(Discrete_PID_Controller2_out1)  // single
                                                       );

  always @(posedge clk or posedge reset)
    begin : rd_16_process
      if (reset == 1'b1) begin
        Discrete_PID_Controller2_out1_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Discrete_PID_Controller2_out1_1 <= Discrete_PID_Controller2_out1;
        end
      end
    end



  assign pw2_sign_const_1 = 1'b0;



  assign pw2_shift_const_1 = 9'sb111111111;



  assign s_state_out1_11 = s_state_out1_10;

  always @(posedge clk or posedge reset)
    begin : rd_17_process
      if (reset == 1'b1) begin
        s_state_out1_12 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          s_state_out1_12 <= s_state_out1_11;
        end
      end
    end



  nfp_gain_pow2_single u_nfp_gain_pow2_single_1 (.clk(clk),
                                                 .reset(reset),
                                                 .enb(enb),
                                                 .nfp_in1(s_state_out1_12),  // single
                                                 .nfp_in2(pw2_sign_const_1),  // ufix1
                                                 .nfp_in3(pw2_shift_const_1),  // sfix9
                                                 .nfp_out(s_denom_gain1_4)  // single
                                                 );

  always @(posedge clk or posedge reset)
    begin : rd_18_process
      if (reset == 1'b1) begin
        for(rd_18_t_1 = 32'sd0; rd_18_t_1 <= 32'sd28; rd_18_t_1 = rd_18_t_1 + 32'sd1) begin
          rd_18_reg[rd_18_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_18_t_0_1 = 32'sd0; rd_18_t_0_1 <= 32'sd28; rd_18_t_0_1 = rd_18_t_0_1 + 32'sd1) begin
            rd_18_reg[rd_18_t_0_1] <= rd_18_reg_next[rd_18_t_0_1];
          end
        end
      end
    end

  always @* begin
    s_denom_gain1_5 = rd_18_reg[28];
    rd_18_reg_next[0] = s_denom_gain1_4;

    for(rd_18_t_0_0 = 32'sd0; rd_18_t_0_0 <= 32'sd27; rd_18_t_0_0 = rd_18_t_0_0 + 32'sd1) begin
      rd_18_reg_next[rd_18_t_0_0 + 32'sd1] = rd_18_reg[rd_18_t_0_0];
    end

  end



  nfp_sub_single u_nfp_sub_comp_7 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Discrete_PID_Controller2_out1_1),  // single
                                   .nfp_in2(s_denom_gain1_5),  // single
                                   .nfp_out(s_denom_acc_out1_2)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : s_state_out1_bypass_process
      if (reset == 1'b1) begin
        s_state_out1_bypass_reg <= 32'h00000000;
      end
      else begin
        if (enb_1_20000000_1) begin
          s_state_out1_bypass_reg <= s_denom_acc_out1_2;
        end
      end
    end

  assign s_state_out1_10 = (enb_1_20000000_1 == 1'b1 ? s_denom_acc_out1_2 :
              s_state_out1_bypass_reg);



  assign s_state_out1_13 = s_state_out1_10;

  always @(posedge clk or posedge reset)
    begin : rd_19_process
      if (reset == 1'b1) begin
        s_state_out1_14 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          s_state_out1_14 <= s_state_out1_13;
        end
      end
    end



  nfp_sub_single u_nfp_sub_comp_8 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Rates_3[2]),  // single
                                   .nfp_in2(s_state_out1_14),  // single
                                   .nfp_out(Sum4_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : rd_21_process
      if (reset == 1'b1) begin
        for(rd_21_t_1 = 32'sd0; rd_21_t_1 <= 32'sd1; rd_21_t_1 = rd_21_t_1 + 32'sd1) begin
          rd_21_reg[rd_21_t_1] <= 32'h00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_21_t_0_0 = 32'sd0; rd_21_t_0_0 <= 32'sd1; rd_21_t_0_0 = rd_21_t_0_0 + 32'sd1) begin
            rd_21_reg[rd_21_t_0_0] <= rd_21_reg_next[rd_21_t_0_0];
          end
        end
      end
    end

  assign Sum4_out1_1 = rd_21_reg[1];
  assign rd_21_reg_next[0] = Sum4_out1;
  assign rd_21_reg_next[1] = rd_21_reg[0];



  nfp_mul_single u_nfp_mul_comp_3 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in1(Kr_out1_1),  // single
                                   .nfp_in2(Sum4_out1_1),  // single
                                   .nfp_out(Product2_out1)  // single
                                   );

  always @(posedge clk or posedge reset)
    begin : rd_22_process
      if (reset == 1'b1) begin
        Product2_out1_1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Product2_out1_1 <= Product2_out1;
        end
      end
    end



  assign Out3 = Product2_out1_1;

  assign ce_out = enb_1_1_1;

endmodule  // HDLDroneModel3

